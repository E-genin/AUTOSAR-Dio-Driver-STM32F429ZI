
AUTOSAR-Dio-Driver-STM32F429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08001654  08001654  00011654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001748  08001748  00020608  2**0
                  CONTENTS
  4 .ARM          00000000  08001748  08001748  00020608  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001748  08001748  00020608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001748  08001748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800174c  0800174c  0001174c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000608  20000000  08001750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020608  2**0
                  CONTENTS
 10 .bss          0000016c  20000608  20000608  00020608  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000774  20000774  00020608  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020608  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020632  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000113d  00000000  00000000  00020675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000066a  00000000  00000000  000217b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a8  00000000  00000000  00021e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000010e  00000000  00000000  00021fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000033b5  00000000  00000000  000220d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001c88  00000000  00000000  0002548b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ab8f  00000000  00000000  00027113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000e5c  00000000  00000000  00031ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00032b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000608 	.word	0x20000608
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800163c 	.word	0x0800163c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000060c 	.word	0x2000060c
 80001ec:	0800163c 	.word	0x0800163c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <Port_init>:

#include "Application.h"


void Port_init(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	uint32 value_to_write = 0x00000006;
 8000296:	2306      	movs	r3, #6
 8000298:	607b      	str	r3, [r7, #4]

	(*((volatile uint32 *)(RCC_REG_ADDRESS+RCC_AHB1ENR_OFFSET))) |= value_to_write;
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <Port_init+0x34>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	4909      	ldr	r1, [pc, #36]	; (80002c4 <Port_init+0x34>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4313      	orrs	r3, r2
 80002a4:	600b      	str	r3, [r1, #0]



	value_to_write = 0x55555555;
 80002a6:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 80002aa:	607b      	str	r3, [r7, #4]

	(*((volatile uint32 *)(PORT_GPIOB_ADDRESS+GPIO_MODER_OFFSET))) |= value_to_write; 
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <Port_init+0x38>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4905      	ldr	r1, [pc, #20]	; (80002c8 <Port_init+0x38>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4313      	orrs	r3, r2
 80002b6:	600b      	str	r3, [r1, #0]
}
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40023830 	.word	0x40023830
 80002c8:	40020400 	.word	0x40020400

080002cc <Random_level_Generator>:


Dio_LevelType Random_level_Generator(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
	Dio_LevelType Random_Level; 

	uint32 s = rand();
 80002d2:	f000 f9d5 	bl	8000680 <rand>
 80002d6:	4603      	mov	r3, r0
 80002d8:	607b      	str	r3, [r7, #4]

	Random_Level = (Dio_LevelType) (s%2); 
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	70fb      	strb	r3, [r7, #3]

	return Random_Level; 
 80002e4:	78fb      	ldrb	r3, [r7, #3]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <Use_Case_1>:

void Use_Case_1(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0

	Port_init(); 
 80002f6:	f7ff ffcb 	bl	8000290 <Port_init>
	while(1)
	{

		Dio_LevelType PushButtonValue; 

		PushButtonValue = Dio_ReadChannel(PUSH_BUTTON); 
 80002fa:	202d      	movs	r0, #45	; 0x2d
 80002fc:	f000 f826 	bl	800034c <Dio_ReadChannel>
 8000300:	4603      	mov	r3, r0
 8000302:	73bb      	strb	r3, [r7, #14]

		if (STD_HIGH==PushButtonValue)
 8000304:	7bbb      	ldrb	r3, [r7, #14]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d115      	bne.n	8000336 <Use_Case_1+0x46>
		{
			Dio_LevelType level_to_write = Random_level_Generator(); 
 800030a:	f7ff ffdf 	bl	80002cc <Random_level_Generator>
 800030e:	4603      	mov	r3, r0
 8000310:	73fb      	strb	r3, [r7, #15]

			Dio_WriteChannel(LED1, level_to_write); 
 8000312:	7bfb      	ldrb	r3, [r7, #15]
 8000314:	4619      	mov	r1, r3
 8000316:	2017      	movs	r0, #23
 8000318:	f000 f846 	bl	80003a8 <Dio_WriteChannel>

			if(STD_LOW==level_to_write) level_to_write = STD_HIGH; else level_to_write = STD_LOW; 
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d102      	bne.n	8000328 <Use_Case_1+0x38>
 8000322:	2301      	movs	r3, #1
 8000324:	73fb      	strb	r3, [r7, #15]
 8000326:	e001      	b.n	800032c <Use_Case_1+0x3c>
 8000328:	2300      	movs	r3, #0
 800032a:	73fb      	strb	r3, [r7, #15]

			Dio_WriteChannel(LED2, level_to_write); 
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	4619      	mov	r1, r3
 8000330:	201e      	movs	r0, #30
 8000332:	f000 f839 	bl	80003a8 <Dio_WriteChannel>
		else 
		{

		}

		Dio_PortLevelType P00_Value = Dio_ReadPort(PORT_GPIOB);
 8000336:	2001      	movs	r0, #1
 8000338:	f000 f872 	bl	8000420 <Dio_ReadPort>
 800033c:	60b8      	str	r0, [r7, #8]

		Dio_PortLevelType MyChannelGroup = Dio_ReadChannelGroup(LED1_LED2_GROUP);
 800033e:	4802      	ldr	r0, [pc, #8]	; (8000348 <Use_Case_1+0x58>)
 8000340:	f000 f884 	bl	800044c <Dio_ReadChannelGroup>
 8000344:	6078      	str	r0, [r7, #4]
	{
 8000346:	e7d8      	b.n	80002fa <Use_Case_1+0xa>
 8000348:	0800165c 	.word	0x0800165c

0800034c <Dio_ReadChannel>:
}; 



Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelID)
{
 800034c:	b480      	push	{r7}
 800034e:	b087      	sub	sp, #28
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]

    PortAddressType PortAddress = LookUpTable [ChannelID].PortAddress;
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <Dio_ReadChannel+0x58>)
 800035a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800035e:	617b      	str	r3, [r7, #20]
    BitPositionType BitPosition = LookUpTable [ChannelID].BitPosition;
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <Dio_ReadChannel+0x58>)
 8000364:	00db      	lsls	r3, r3, #3
 8000366:	4413      	add	r3, r2
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	74fb      	strb	r3, [r7, #19]


    Dio_PortLevelType PortValue = (*((volatile uint32 *)(PortAddress+GPIO_IDR_OFFSET)));
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	3310      	adds	r3, #16
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	60fb      	str	r3, [r7, #12]

    PortValue &= (1U<<BitPosition); // the content of the port is masked with the mask, the only bit not affected will be the bit we want to read
 8000374:	7cfb      	ldrb	r3, [r7, #19]
 8000376:	2201      	movs	r2, #1
 8000378:	fa02 f303 	lsl.w	r3, r2, r3
 800037c:	68fa      	ldr	r2, [r7, #12]
 800037e:	4013      	ands	r3, r2
 8000380:	60fb      	str	r3, [r7, #12]

    uint32 PinValue = (PortValue>>BitPosition);
 8000382:	7cfb      	ldrb	r3, [r7, #19]
 8000384:	68fa      	ldr	r2, [r7, #12]
 8000386:	fa22 f303 	lsr.w	r3, r2, r3
 800038a:	60bb      	str	r3, [r7, #8]

    if (PinValue) return STD_HIGH; else return STD_LOW;
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <Dio_ReadChannel+0x4a>
 8000392:	2301      	movs	r3, #1
 8000394:	e000      	b.n	8000398 <Dio_ReadChannel+0x4c>
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	371c      	adds	r7, #28
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000

080003a8 <Dio_WriteChannel>:


void Dio_WriteChannel(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b087      	sub	sp, #28
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	460a      	mov	r2, r1
 80003b2:	71fb      	strb	r3, [r7, #7]
 80003b4:	4613      	mov	r3, r2
 80003b6:	71bb      	strb	r3, [r7, #6]
    PortAddressType PortAddress = LookUpTable [ChannelId].PortAddress;
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	4a18      	ldr	r2, [pc, #96]	; (800041c <Dio_WriteChannel+0x74>)
 80003bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80003c0:	617b      	str	r3, [r7, #20]
    BitPositionType BitPosition = LookUpTable [ChannelId].BitPosition;
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	4a15      	ldr	r2, [pc, #84]	; (800041c <Dio_WriteChannel+0x74>)
 80003c6:	00db      	lsls	r3, r3, #3
 80003c8:	4413      	add	r3, r2
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	74fb      	strb	r3, [r7, #19]

    if (Level == STD_HIGH)
 80003ce:	79bb      	ldrb	r3, [r7, #6]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d10e      	bne.n	80003f2 <Dio_WriteChannel+0x4a>
    {
        uint32 mask = (1U<<BitPosition);
 80003d4:	7cfb      	ldrb	r3, [r7, #19]
 80003d6:	2201      	movs	r2, #1
 80003d8:	fa02 f303 	lsl.w	r3, r2, r3
 80003dc:	60bb      	str	r3, [r7, #8]
        (*((volatile uint32 *)(PortAddress+GPIO_ODR_OFFSET))) |= mask;
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	3314      	adds	r3, #20
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	3314      	adds	r3, #20
 80003e8:	4619      	mov	r1, r3
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	4313      	orrs	r3, r2
 80003ee:	600b      	str	r3, [r1, #0]
    else
    {
        uint32 mask = ~(1U<<BitPosition);
        (*((volatile uint32 *)(PortAddress+GPIO_ODR_OFFSET))) &= mask;
    }
}
 80003f0:	e00e      	b.n	8000410 <Dio_WriteChannel+0x68>
        uint32 mask = ~(1U<<BitPosition);
 80003f2:	7cfb      	ldrb	r3, [r7, #19]
 80003f4:	2201      	movs	r2, #1
 80003f6:	fa02 f303 	lsl.w	r3, r2, r3
 80003fa:	43db      	mvns	r3, r3
 80003fc:	60fb      	str	r3, [r7, #12]
        (*((volatile uint32 *)(PortAddress+GPIO_ODR_OFFSET))) &= mask;
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	3314      	adds	r3, #20
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	3314      	adds	r3, #20
 8000408:	4619      	mov	r1, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	4013      	ands	r3, r2
 800040e:	600b      	str	r3, [r1, #0]
}
 8000410:	bf00      	nop
 8000412:	371c      	adds	r7, #28
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000000 	.word	0x20000000

08000420 <Dio_ReadPort>:



Dio_PortLevelType Dio_ReadPort(Dio_PortType PortId)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	PortAddressType PortAddress = LookUpTable_for_Ports[PortId]; 
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	4a06      	ldr	r2, [pc, #24]	; (8000448 <Dio_ReadPort+0x28>)
 800042e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000432:	60fb      	str	r3, [r7, #12]

	Dio_PortLevelType PortValue = (*((volatile uint32 *)(PortAddress+GPIO_IDR_OFFSET)));
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3310      	adds	r3, #16
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	60bb      	str	r3, [r7, #8]

	return PortValue; 
 800043c:	68bb      	ldr	r3, [r7, #8]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	20000580 	.word	0x20000580

0800044c <Dio_ReadChannelGroup>:
	(*((volatile uint32 *)(PortAddress+GPIO_ODR_OFFSET))) = Level; 
}


Dio_PortLevelType Dio_ReadChannelGroup(const Dio_ChannelGroupType* ChannelGroupIdPtr)
{
 800044c:	b480      	push	{r7}
 800044e:	b089      	sub	sp, #36	; 0x24
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]

	Dio_PortType PortID; 
	uint32 offset, mask; 

	PortID = ChannelGroupIdPtr -> port; 
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	7a1b      	ldrb	r3, [r3, #8]
 8000458:	77fb      	strb	r3, [r7, #31]
	offset = ChannelGroupIdPtr -> offset; 
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	61bb      	str	r3, [r7, #24]
	mask   = ChannelGroupIdPtr -> mask; 
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	617b      	str	r3, [r7, #20]

	PortAddressType PortAddress = LookUpTable_for_Ports[PortID]; 
 8000466:	7ffb      	ldrb	r3, [r7, #31]
 8000468:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <Dio_ReadChannelGroup+0x4c>)
 800046a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800046e:	613b      	str	r3, [r7, #16]

	Dio_PortLevelType PortValue = (*((volatile uint32 *)(PortAddress+GPIO_IDR_OFFSET))); 
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	3310      	adds	r3, #16
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	60fb      	str	r3, [r7, #12]
	PortValue &= mask; 
 8000478:	68fa      	ldr	r2, [r7, #12]
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
	PortValue >>= offset; 
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	69bb      	ldr	r3, [r7, #24]
 8000484:	fa22 f303 	lsr.w	r3, r2, r3
 8000488:	60fb      	str	r3, [r7, #12]

	return PortValue; 
 800048a:	68fb      	ldr	r3, [r7, #12]

}
 800048c:	4618      	mov	r0, r3
 800048e:	3724      	adds	r7, #36	; 0x24
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000580 	.word	0x20000580

0800049c <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
    /* Loop forever */
	//for(;;);

	Use_Case_1();
 80004a0:	f7ff ff26 	bl	80002f0 <Use_Case_1>
 80004a4:	2300      	movs	r3, #0
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	bd80      	pop	{r7, pc}

080004aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  return 1;
 80004ae:	2301      	movs	r3, #1
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <_kill>:

int _kill(int pid, int sig)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80004c2:	f000 fa6f 	bl	80009a4 <__errno>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2216      	movs	r2, #22
 80004ca:	601a      	str	r2, [r3, #0]
  return -1;
 80004cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <_exit>:

void _exit (int status)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80004e0:	f04f 31ff 	mov.w	r1, #4294967295
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff ffe7 	bl	80004b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80004ea:	e7fe      	b.n	80004ea <_exit+0x12>

080004ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e00a      	b.n	8000514 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004fe:	f3af 8000 	nop.w
 8000502:	4601      	mov	r1, r0
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	60ba      	str	r2, [r7, #8]
 800050a:	b2ca      	uxtb	r2, r1
 800050c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	429a      	cmp	r2, r3
 800051a:	dbf0      	blt.n	80004fe <_read+0x12>
  }

  return len;
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b086      	sub	sp, #24
 800052a:	af00      	add	r7, sp, #0
 800052c:	60f8      	str	r0, [r7, #12]
 800052e:	60b9      	str	r1, [r7, #8]
 8000530:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	e009      	b.n	800054c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	60ba      	str	r2, [r7, #8]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	3301      	adds	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	dbf1      	blt.n	8000538 <_write+0x12>
  }
  return len;
 8000554:	687b      	ldr	r3, [r7, #4]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <_close>:

int _close(int file)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000584:	605a      	str	r2, [r3, #4]
  return 0;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <_isatty>:

int _isatty(int file)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800059a:	2301      	movs	r3, #1
}
 800059c:	4618      	mov	r0, r3
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b085      	sub	sp, #20
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	60f8      	str	r0, [r7, #12]
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
	...

080005c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c8:	4a14      	ldr	r2, [pc, #80]	; (800061c <_sbrk+0x5c>)
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <_sbrk+0x60>)
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <_sbrk+0x64>)
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <_sbrk+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d207      	bcs.n	8000600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f0:	f000 f9d8 	bl	80009a4 <__errno>
 80005f4:	4603      	mov	r3, r0
 80005f6:	220c      	movs	r2, #12
 80005f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	e009      	b.n	8000614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <_sbrk+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <_sbrk+0x64>)
 8000610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000612:	68fb      	ldr	r3, [r7, #12]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20030000 	.word	0x20030000
 8000620:	00000400 	.word	0x00000400
 8000624:	20000624 	.word	0x20000624
 8000628:	20000778 	.word	0x20000778

0800062c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000630:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <LoopForever+0x6>)
  ldr r1, =_edata
 8000636:	490d      	ldr	r1, [pc, #52]	; (800066c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <LoopForever+0xe>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800064c:	4c0a      	ldr	r4, [pc, #40]	; (8000678 <LoopForever+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065a:	f000 f9a9 	bl	80009b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff ff1d 	bl	800049c <main>

08000662 <LoopForever>:

LoopForever:
  b LoopForever
 8000662:	e7fe      	b.n	8000662 <LoopForever>
  ldr   r0, =_estack
 8000664:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	20000608 	.word	0x20000608
  ldr r2, =_sidata
 8000670:	08001750 	.word	0x08001750
  ldr r2, =_sbss
 8000674:	20000608 	.word	0x20000608
  ldr r4, =_ebss
 8000678:	20000774 	.word	0x20000774

0800067c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC_IRQHandler>
	...

08000680 <rand>:
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <rand+0x5c>)
 8000682:	b510      	push	{r4, lr}
 8000684:	681c      	ldr	r4, [r3, #0]
 8000686:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000688:	b9b3      	cbnz	r3, 80006b8 <rand+0x38>
 800068a:	2018      	movs	r0, #24
 800068c:	f000 fa20 	bl	8000ad0 <malloc>
 8000690:	4602      	mov	r2, r0
 8000692:	6320      	str	r0, [r4, #48]	; 0x30
 8000694:	b920      	cbnz	r0, 80006a0 <rand+0x20>
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <rand+0x60>)
 8000698:	4812      	ldr	r0, [pc, #72]	; (80006e4 <rand+0x64>)
 800069a:	2152      	movs	r1, #82	; 0x52
 800069c:	f000 f9b0 	bl	8000a00 <__assert_func>
 80006a0:	4911      	ldr	r1, [pc, #68]	; (80006e8 <rand+0x68>)
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <rand+0x6c>)
 80006a4:	e9c0 1300 	strd	r1, r3, [r0]
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <rand+0x70>)
 80006aa:	6083      	str	r3, [r0, #8]
 80006ac:	230b      	movs	r3, #11
 80006ae:	8183      	strh	r3, [r0, #12]
 80006b0:	2100      	movs	r1, #0
 80006b2:	2001      	movs	r0, #1
 80006b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80006b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <rand+0x74>)
 80006bc:	690b      	ldr	r3, [r1, #16]
 80006be:	694c      	ldr	r4, [r1, #20]
 80006c0:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <rand+0x78>)
 80006c2:	4358      	muls	r0, r3
 80006c4:	fb02 0004 	mla	r0, r2, r4, r0
 80006c8:	fba3 3202 	umull	r3, r2, r3, r2
 80006cc:	3301      	adds	r3, #1
 80006ce:	eb40 0002 	adc.w	r0, r0, r2
 80006d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80006d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80006da:	bd10      	pop	{r4, pc}
 80006dc:	20000604 	.word	0x20000604
 80006e0:	08001668 	.word	0x08001668
 80006e4:	0800167f 	.word	0x0800167f
 80006e8:	abcd330e 	.word	0xabcd330e
 80006ec:	e66d1234 	.word	0xe66d1234
 80006f0:	0005deec 	.word	0x0005deec
 80006f4:	5851f42d 	.word	0x5851f42d
 80006f8:	4c957f2d 	.word	0x4c957f2d

080006fc <std>:
 80006fc:	2300      	movs	r3, #0
 80006fe:	b510      	push	{r4, lr}
 8000700:	4604      	mov	r4, r0
 8000702:	e9c0 3300 	strd	r3, r3, [r0]
 8000706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800070a:	6083      	str	r3, [r0, #8]
 800070c:	8181      	strh	r1, [r0, #12]
 800070e:	6643      	str	r3, [r0, #100]	; 0x64
 8000710:	81c2      	strh	r2, [r0, #14]
 8000712:	6183      	str	r3, [r0, #24]
 8000714:	4619      	mov	r1, r3
 8000716:	2208      	movs	r2, #8
 8000718:	305c      	adds	r0, #92	; 0x5c
 800071a:	f000 f8f4 	bl	8000906 <memset>
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <std+0x58>)
 8000720:	6263      	str	r3, [r4, #36]	; 0x24
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <std+0x5c>)
 8000724:	62a3      	str	r3, [r4, #40]	; 0x28
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <std+0x60>)
 8000728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <std+0x64>)
 800072c:	6323      	str	r3, [r4, #48]	; 0x30
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <std+0x68>)
 8000730:	6224      	str	r4, [r4, #32]
 8000732:	429c      	cmp	r4, r3
 8000734:	d006      	beq.n	8000744 <std+0x48>
 8000736:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800073a:	4294      	cmp	r4, r2
 800073c:	d002      	beq.n	8000744 <std+0x48>
 800073e:	33d0      	adds	r3, #208	; 0xd0
 8000740:	429c      	cmp	r4, r3
 8000742:	d105      	bne.n	8000750 <std+0x54>
 8000744:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074c:	f000 b954 	b.w	80009f8 <__retarget_lock_init_recursive>
 8000750:	bd10      	pop	{r4, pc}
 8000752:	bf00      	nop
 8000754:	08000881 	.word	0x08000881
 8000758:	080008a3 	.word	0x080008a3
 800075c:	080008db 	.word	0x080008db
 8000760:	080008ff 	.word	0x080008ff
 8000764:	20000628 	.word	0x20000628

08000768 <stdio_exit_handler>:
 8000768:	4a02      	ldr	r2, [pc, #8]	; (8000774 <stdio_exit_handler+0xc>)
 800076a:	4903      	ldr	r1, [pc, #12]	; (8000778 <stdio_exit_handler+0x10>)
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <stdio_exit_handler+0x14>)
 800076e:	f000 b869 	b.w	8000844 <_fwalk_sglue>
 8000772:	bf00      	nop
 8000774:	200005ac 	.word	0x200005ac
 8000778:	08000d3d 	.word	0x08000d3d
 800077c:	200005b8 	.word	0x200005b8

08000780 <cleanup_stdio>:
 8000780:	6841      	ldr	r1, [r0, #4]
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <cleanup_stdio+0x34>)
 8000784:	4299      	cmp	r1, r3
 8000786:	b510      	push	{r4, lr}
 8000788:	4604      	mov	r4, r0
 800078a:	d001      	beq.n	8000790 <cleanup_stdio+0x10>
 800078c:	f000 fad6 	bl	8000d3c <_fflush_r>
 8000790:	68a1      	ldr	r1, [r4, #8]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <cleanup_stdio+0x38>)
 8000794:	4299      	cmp	r1, r3
 8000796:	d002      	beq.n	800079e <cleanup_stdio+0x1e>
 8000798:	4620      	mov	r0, r4
 800079a:	f000 facf 	bl	8000d3c <_fflush_r>
 800079e:	68e1      	ldr	r1, [r4, #12]
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <cleanup_stdio+0x3c>)
 80007a2:	4299      	cmp	r1, r3
 80007a4:	d004      	beq.n	80007b0 <cleanup_stdio+0x30>
 80007a6:	4620      	mov	r0, r4
 80007a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ac:	f000 bac6 	b.w	8000d3c <_fflush_r>
 80007b0:	bd10      	pop	{r4, pc}
 80007b2:	bf00      	nop
 80007b4:	20000628 	.word	0x20000628
 80007b8:	20000690 	.word	0x20000690
 80007bc:	200006f8 	.word	0x200006f8

080007c0 <global_stdio_init.part.0>:
 80007c0:	b510      	push	{r4, lr}
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <global_stdio_init.part.0+0x30>)
 80007c4:	4c0b      	ldr	r4, [pc, #44]	; (80007f4 <global_stdio_init.part.0+0x34>)
 80007c6:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <global_stdio_init.part.0+0x38>)
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	4620      	mov	r0, r4
 80007cc:	2200      	movs	r2, #0
 80007ce:	2104      	movs	r1, #4
 80007d0:	f7ff ff94 	bl	80006fc <std>
 80007d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80007d8:	2201      	movs	r2, #1
 80007da:	2109      	movs	r1, #9
 80007dc:	f7ff ff8e 	bl	80006fc <std>
 80007e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80007e4:	2202      	movs	r2, #2
 80007e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ea:	2112      	movs	r1, #18
 80007ec:	f7ff bf86 	b.w	80006fc <std>
 80007f0:	20000760 	.word	0x20000760
 80007f4:	20000628 	.word	0x20000628
 80007f8:	08000769 	.word	0x08000769

080007fc <__sfp_lock_acquire>:
 80007fc:	4801      	ldr	r0, [pc, #4]	; (8000804 <__sfp_lock_acquire+0x8>)
 80007fe:	f000 b8fc 	b.w	80009fa <__retarget_lock_acquire_recursive>
 8000802:	bf00      	nop
 8000804:	20000769 	.word	0x20000769

08000808 <__sfp_lock_release>:
 8000808:	4801      	ldr	r0, [pc, #4]	; (8000810 <__sfp_lock_release+0x8>)
 800080a:	f000 b8f7 	b.w	80009fc <__retarget_lock_release_recursive>
 800080e:	bf00      	nop
 8000810:	20000769 	.word	0x20000769

08000814 <__sinit>:
 8000814:	b510      	push	{r4, lr}
 8000816:	4604      	mov	r4, r0
 8000818:	f7ff fff0 	bl	80007fc <__sfp_lock_acquire>
 800081c:	6a23      	ldr	r3, [r4, #32]
 800081e:	b11b      	cbz	r3, 8000828 <__sinit+0x14>
 8000820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000824:	f7ff bff0 	b.w	8000808 <__sfp_lock_release>
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <__sinit+0x28>)
 800082a:	6223      	str	r3, [r4, #32]
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__sinit+0x2c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1f5      	bne.n	8000820 <__sinit+0xc>
 8000834:	f7ff ffc4 	bl	80007c0 <global_stdio_init.part.0>
 8000838:	e7f2      	b.n	8000820 <__sinit+0xc>
 800083a:	bf00      	nop
 800083c:	08000781 	.word	0x08000781
 8000840:	20000760 	.word	0x20000760

08000844 <_fwalk_sglue>:
 8000844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000848:	4607      	mov	r7, r0
 800084a:	4688      	mov	r8, r1
 800084c:	4614      	mov	r4, r2
 800084e:	2600      	movs	r6, #0
 8000850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000854:	f1b9 0901 	subs.w	r9, r9, #1
 8000858:	d505      	bpl.n	8000866 <_fwalk_sglue+0x22>
 800085a:	6824      	ldr	r4, [r4, #0]
 800085c:	2c00      	cmp	r4, #0
 800085e:	d1f7      	bne.n	8000850 <_fwalk_sglue+0xc>
 8000860:	4630      	mov	r0, r6
 8000862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000866:	89ab      	ldrh	r3, [r5, #12]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d907      	bls.n	800087c <_fwalk_sglue+0x38>
 800086c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000870:	3301      	adds	r3, #1
 8000872:	d003      	beq.n	800087c <_fwalk_sglue+0x38>
 8000874:	4629      	mov	r1, r5
 8000876:	4638      	mov	r0, r7
 8000878:	47c0      	blx	r8
 800087a:	4306      	orrs	r6, r0
 800087c:	3568      	adds	r5, #104	; 0x68
 800087e:	e7e9      	b.n	8000854 <_fwalk_sglue+0x10>

08000880 <__sread>:
 8000880:	b510      	push	{r4, lr}
 8000882:	460c      	mov	r4, r1
 8000884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000888:	f000 f868 	bl	800095c <_read_r>
 800088c:	2800      	cmp	r0, #0
 800088e:	bfab      	itete	ge
 8000890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000892:	89a3      	ldrhlt	r3, [r4, #12]
 8000894:	181b      	addge	r3, r3, r0
 8000896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800089a:	bfac      	ite	ge
 800089c:	6563      	strge	r3, [r4, #84]	; 0x54
 800089e:	81a3      	strhlt	r3, [r4, #12]
 80008a0:	bd10      	pop	{r4, pc}

080008a2 <__swrite>:
 80008a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008a6:	461f      	mov	r7, r3
 80008a8:	898b      	ldrh	r3, [r1, #12]
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	4605      	mov	r5, r0
 80008ae:	460c      	mov	r4, r1
 80008b0:	4616      	mov	r6, r2
 80008b2:	d505      	bpl.n	80008c0 <__swrite+0x1e>
 80008b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008b8:	2302      	movs	r3, #2
 80008ba:	2200      	movs	r2, #0
 80008bc:	f000 f83c 	bl	8000938 <_lseek_r>
 80008c0:	89a3      	ldrh	r3, [r4, #12]
 80008c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008ca:	81a3      	strh	r3, [r4, #12]
 80008cc:	4632      	mov	r2, r6
 80008ce:	463b      	mov	r3, r7
 80008d0:	4628      	mov	r0, r5
 80008d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008d6:	f000 b853 	b.w	8000980 <_write_r>

080008da <__sseek>:
 80008da:	b510      	push	{r4, lr}
 80008dc:	460c      	mov	r4, r1
 80008de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e2:	f000 f829 	bl	8000938 <_lseek_r>
 80008e6:	1c43      	adds	r3, r0, #1
 80008e8:	89a3      	ldrh	r3, [r4, #12]
 80008ea:	bf15      	itete	ne
 80008ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80008ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80008f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80008f6:	81a3      	strheq	r3, [r4, #12]
 80008f8:	bf18      	it	ne
 80008fa:	81a3      	strhne	r3, [r4, #12]
 80008fc:	bd10      	pop	{r4, pc}

080008fe <__sclose>:
 80008fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000902:	f000 b809 	b.w	8000918 <_close_r>

08000906 <memset>:
 8000906:	4402      	add	r2, r0
 8000908:	4603      	mov	r3, r0
 800090a:	4293      	cmp	r3, r2
 800090c:	d100      	bne.n	8000910 <memset+0xa>
 800090e:	4770      	bx	lr
 8000910:	f803 1b01 	strb.w	r1, [r3], #1
 8000914:	e7f9      	b.n	800090a <memset+0x4>
	...

08000918 <_close_r>:
 8000918:	b538      	push	{r3, r4, r5, lr}
 800091a:	4d06      	ldr	r5, [pc, #24]	; (8000934 <_close_r+0x1c>)
 800091c:	2300      	movs	r3, #0
 800091e:	4604      	mov	r4, r0
 8000920:	4608      	mov	r0, r1
 8000922:	602b      	str	r3, [r5, #0]
 8000924:	f7ff fe1b 	bl	800055e <_close>
 8000928:	1c43      	adds	r3, r0, #1
 800092a:	d102      	bne.n	8000932 <_close_r+0x1a>
 800092c:	682b      	ldr	r3, [r5, #0]
 800092e:	b103      	cbz	r3, 8000932 <_close_r+0x1a>
 8000930:	6023      	str	r3, [r4, #0]
 8000932:	bd38      	pop	{r3, r4, r5, pc}
 8000934:	20000764 	.word	0x20000764

08000938 <_lseek_r>:
 8000938:	b538      	push	{r3, r4, r5, lr}
 800093a:	4d07      	ldr	r5, [pc, #28]	; (8000958 <_lseek_r+0x20>)
 800093c:	4604      	mov	r4, r0
 800093e:	4608      	mov	r0, r1
 8000940:	4611      	mov	r1, r2
 8000942:	2200      	movs	r2, #0
 8000944:	602a      	str	r2, [r5, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	f7ff fe2d 	bl	80005a6 <_lseek>
 800094c:	1c43      	adds	r3, r0, #1
 800094e:	d102      	bne.n	8000956 <_lseek_r+0x1e>
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	b103      	cbz	r3, 8000956 <_lseek_r+0x1e>
 8000954:	6023      	str	r3, [r4, #0]
 8000956:	bd38      	pop	{r3, r4, r5, pc}
 8000958:	20000764 	.word	0x20000764

0800095c <_read_r>:
 800095c:	b538      	push	{r3, r4, r5, lr}
 800095e:	4d07      	ldr	r5, [pc, #28]	; (800097c <_read_r+0x20>)
 8000960:	4604      	mov	r4, r0
 8000962:	4608      	mov	r0, r1
 8000964:	4611      	mov	r1, r2
 8000966:	2200      	movs	r2, #0
 8000968:	602a      	str	r2, [r5, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	f7ff fdbe 	bl	80004ec <_read>
 8000970:	1c43      	adds	r3, r0, #1
 8000972:	d102      	bne.n	800097a <_read_r+0x1e>
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	b103      	cbz	r3, 800097a <_read_r+0x1e>
 8000978:	6023      	str	r3, [r4, #0]
 800097a:	bd38      	pop	{r3, r4, r5, pc}
 800097c:	20000764 	.word	0x20000764

08000980 <_write_r>:
 8000980:	b538      	push	{r3, r4, r5, lr}
 8000982:	4d07      	ldr	r5, [pc, #28]	; (80009a0 <_write_r+0x20>)
 8000984:	4604      	mov	r4, r0
 8000986:	4608      	mov	r0, r1
 8000988:	4611      	mov	r1, r2
 800098a:	2200      	movs	r2, #0
 800098c:	602a      	str	r2, [r5, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	f7ff fdc9 	bl	8000526 <_write>
 8000994:	1c43      	adds	r3, r0, #1
 8000996:	d102      	bne.n	800099e <_write_r+0x1e>
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	b103      	cbz	r3, 800099e <_write_r+0x1e>
 800099c:	6023      	str	r3, [r4, #0]
 800099e:	bd38      	pop	{r3, r4, r5, pc}
 80009a0:	20000764 	.word	0x20000764

080009a4 <__errno>:
 80009a4:	4b01      	ldr	r3, [pc, #4]	; (80009ac <__errno+0x8>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000604 	.word	0x20000604

080009b0 <__libc_init_array>:
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	4d0d      	ldr	r5, [pc, #52]	; (80009e8 <__libc_init_array+0x38>)
 80009b4:	4c0d      	ldr	r4, [pc, #52]	; (80009ec <__libc_init_array+0x3c>)
 80009b6:	1b64      	subs	r4, r4, r5
 80009b8:	10a4      	asrs	r4, r4, #2
 80009ba:	2600      	movs	r6, #0
 80009bc:	42a6      	cmp	r6, r4
 80009be:	d109      	bne.n	80009d4 <__libc_init_array+0x24>
 80009c0:	4d0b      	ldr	r5, [pc, #44]	; (80009f0 <__libc_init_array+0x40>)
 80009c2:	4c0c      	ldr	r4, [pc, #48]	; (80009f4 <__libc_init_array+0x44>)
 80009c4:	f000 fe3a 	bl	800163c <_init>
 80009c8:	1b64      	subs	r4, r4, r5
 80009ca:	10a4      	asrs	r4, r4, #2
 80009cc:	2600      	movs	r6, #0
 80009ce:	42a6      	cmp	r6, r4
 80009d0:	d105      	bne.n	80009de <__libc_init_array+0x2e>
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d8:	4798      	blx	r3
 80009da:	3601      	adds	r6, #1
 80009dc:	e7ee      	b.n	80009bc <__libc_init_array+0xc>
 80009de:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e2:	4798      	blx	r3
 80009e4:	3601      	adds	r6, #1
 80009e6:	e7f2      	b.n	80009ce <__libc_init_array+0x1e>
 80009e8:	08001748 	.word	0x08001748
 80009ec:	08001748 	.word	0x08001748
 80009f0:	08001748 	.word	0x08001748
 80009f4:	0800174c 	.word	0x0800174c

080009f8 <__retarget_lock_init_recursive>:
 80009f8:	4770      	bx	lr

080009fa <__retarget_lock_acquire_recursive>:
 80009fa:	4770      	bx	lr

080009fc <__retarget_lock_release_recursive>:
 80009fc:	4770      	bx	lr
	...

08000a00 <__assert_func>:
 8000a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000a02:	4614      	mov	r4, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <__assert_func+0x2c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4605      	mov	r5, r0
 8000a0c:	68d8      	ldr	r0, [r3, #12]
 8000a0e:	b14c      	cbz	r4, 8000a24 <__assert_func+0x24>
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <__assert_func+0x30>)
 8000a12:	9100      	str	r1, [sp, #0]
 8000a14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000a18:	4906      	ldr	r1, [pc, #24]	; (8000a34 <__assert_func+0x34>)
 8000a1a:	462b      	mov	r3, r5
 8000a1c:	f000 f9b6 	bl	8000d8c <fiprintf>
 8000a20:	f000 f9d6 	bl	8000dd0 <abort>
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <__assert_func+0x38>)
 8000a26:	461c      	mov	r4, r3
 8000a28:	e7f3      	b.n	8000a12 <__assert_func+0x12>
 8000a2a:	bf00      	nop
 8000a2c:	20000604 	.word	0x20000604
 8000a30:	080016d7 	.word	0x080016d7
 8000a34:	080016e4 	.word	0x080016e4
 8000a38:	08001712 	.word	0x08001712

08000a3c <_free_r>:
 8000a3c:	b538      	push	{r3, r4, r5, lr}
 8000a3e:	4605      	mov	r5, r0
 8000a40:	2900      	cmp	r1, #0
 8000a42:	d041      	beq.n	8000ac8 <_free_r+0x8c>
 8000a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a48:	1f0c      	subs	r4, r1, #4
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bfb8      	it	lt
 8000a4e:	18e4      	addlt	r4, r4, r3
 8000a50:	f000 f8e6 	bl	8000c20 <__malloc_lock>
 8000a54:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <_free_r+0x90>)
 8000a56:	6813      	ldr	r3, [r2, #0]
 8000a58:	b933      	cbnz	r3, 8000a68 <_free_r+0x2c>
 8000a5a:	6063      	str	r3, [r4, #4]
 8000a5c:	6014      	str	r4, [r2, #0]
 8000a5e:	4628      	mov	r0, r5
 8000a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a64:	f000 b8e2 	b.w	8000c2c <__malloc_unlock>
 8000a68:	42a3      	cmp	r3, r4
 8000a6a:	d908      	bls.n	8000a7e <_free_r+0x42>
 8000a6c:	6820      	ldr	r0, [r4, #0]
 8000a6e:	1821      	adds	r1, r4, r0
 8000a70:	428b      	cmp	r3, r1
 8000a72:	bf01      	itttt	eq
 8000a74:	6819      	ldreq	r1, [r3, #0]
 8000a76:	685b      	ldreq	r3, [r3, #4]
 8000a78:	1809      	addeq	r1, r1, r0
 8000a7a:	6021      	streq	r1, [r4, #0]
 8000a7c:	e7ed      	b.n	8000a5a <_free_r+0x1e>
 8000a7e:	461a      	mov	r2, r3
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	b10b      	cbz	r3, 8000a88 <_free_r+0x4c>
 8000a84:	42a3      	cmp	r3, r4
 8000a86:	d9fa      	bls.n	8000a7e <_free_r+0x42>
 8000a88:	6811      	ldr	r1, [r2, #0]
 8000a8a:	1850      	adds	r0, r2, r1
 8000a8c:	42a0      	cmp	r0, r4
 8000a8e:	d10b      	bne.n	8000aa8 <_free_r+0x6c>
 8000a90:	6820      	ldr	r0, [r4, #0]
 8000a92:	4401      	add	r1, r0
 8000a94:	1850      	adds	r0, r2, r1
 8000a96:	4283      	cmp	r3, r0
 8000a98:	6011      	str	r1, [r2, #0]
 8000a9a:	d1e0      	bne.n	8000a5e <_free_r+0x22>
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	6053      	str	r3, [r2, #4]
 8000aa2:	4408      	add	r0, r1
 8000aa4:	6010      	str	r0, [r2, #0]
 8000aa6:	e7da      	b.n	8000a5e <_free_r+0x22>
 8000aa8:	d902      	bls.n	8000ab0 <_free_r+0x74>
 8000aaa:	230c      	movs	r3, #12
 8000aac:	602b      	str	r3, [r5, #0]
 8000aae:	e7d6      	b.n	8000a5e <_free_r+0x22>
 8000ab0:	6820      	ldr	r0, [r4, #0]
 8000ab2:	1821      	adds	r1, r4, r0
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	bf04      	itt	eq
 8000ab8:	6819      	ldreq	r1, [r3, #0]
 8000aba:	685b      	ldreq	r3, [r3, #4]
 8000abc:	6063      	str	r3, [r4, #4]
 8000abe:	bf04      	itt	eq
 8000ac0:	1809      	addeq	r1, r1, r0
 8000ac2:	6021      	streq	r1, [r4, #0]
 8000ac4:	6054      	str	r4, [r2, #4]
 8000ac6:	e7ca      	b.n	8000a5e <_free_r+0x22>
 8000ac8:	bd38      	pop	{r3, r4, r5, pc}
 8000aca:	bf00      	nop
 8000acc:	2000076c 	.word	0x2000076c

08000ad0 <malloc>:
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <malloc+0xc>)
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	6818      	ldr	r0, [r3, #0]
 8000ad6:	f000 b823 	b.w	8000b20 <_malloc_r>
 8000ada:	bf00      	nop
 8000adc:	20000604 	.word	0x20000604

08000ae0 <sbrk_aligned>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	4e0e      	ldr	r6, [pc, #56]	; (8000b1c <sbrk_aligned+0x3c>)
 8000ae4:	460c      	mov	r4, r1
 8000ae6:	6831      	ldr	r1, [r6, #0]
 8000ae8:	4605      	mov	r5, r0
 8000aea:	b911      	cbnz	r1, 8000af2 <sbrk_aligned+0x12>
 8000aec:	f000 f960 	bl	8000db0 <_sbrk_r>
 8000af0:	6030      	str	r0, [r6, #0]
 8000af2:	4621      	mov	r1, r4
 8000af4:	4628      	mov	r0, r5
 8000af6:	f000 f95b 	bl	8000db0 <_sbrk_r>
 8000afa:	1c43      	adds	r3, r0, #1
 8000afc:	d00a      	beq.n	8000b14 <sbrk_aligned+0x34>
 8000afe:	1cc4      	adds	r4, r0, #3
 8000b00:	f024 0403 	bic.w	r4, r4, #3
 8000b04:	42a0      	cmp	r0, r4
 8000b06:	d007      	beq.n	8000b18 <sbrk_aligned+0x38>
 8000b08:	1a21      	subs	r1, r4, r0
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	f000 f950 	bl	8000db0 <_sbrk_r>
 8000b10:	3001      	adds	r0, #1
 8000b12:	d101      	bne.n	8000b18 <sbrk_aligned+0x38>
 8000b14:	f04f 34ff 	mov.w	r4, #4294967295
 8000b18:	4620      	mov	r0, r4
 8000b1a:	bd70      	pop	{r4, r5, r6, pc}
 8000b1c:	20000770 	.word	0x20000770

08000b20 <_malloc_r>:
 8000b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b24:	1ccd      	adds	r5, r1, #3
 8000b26:	f025 0503 	bic.w	r5, r5, #3
 8000b2a:	3508      	adds	r5, #8
 8000b2c:	2d0c      	cmp	r5, #12
 8000b2e:	bf38      	it	cc
 8000b30:	250c      	movcc	r5, #12
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	4607      	mov	r7, r0
 8000b36:	db01      	blt.n	8000b3c <_malloc_r+0x1c>
 8000b38:	42a9      	cmp	r1, r5
 8000b3a:	d905      	bls.n	8000b48 <_malloc_r+0x28>
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	2600      	movs	r6, #0
 8000b42:	4630      	mov	r0, r6
 8000b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c1c <_malloc_r+0xfc>
 8000b4c:	f000 f868 	bl	8000c20 <__malloc_lock>
 8000b50:	f8d8 3000 	ldr.w	r3, [r8]
 8000b54:	461c      	mov	r4, r3
 8000b56:	bb5c      	cbnz	r4, 8000bb0 <_malloc_r+0x90>
 8000b58:	4629      	mov	r1, r5
 8000b5a:	4638      	mov	r0, r7
 8000b5c:	f7ff ffc0 	bl	8000ae0 <sbrk_aligned>
 8000b60:	1c43      	adds	r3, r0, #1
 8000b62:	4604      	mov	r4, r0
 8000b64:	d155      	bne.n	8000c12 <_malloc_r+0xf2>
 8000b66:	f8d8 4000 	ldr.w	r4, [r8]
 8000b6a:	4626      	mov	r6, r4
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d145      	bne.n	8000bfc <_malloc_r+0xdc>
 8000b70:	2c00      	cmp	r4, #0
 8000b72:	d048      	beq.n	8000c06 <_malloc_r+0xe6>
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	4631      	mov	r1, r6
 8000b78:	4638      	mov	r0, r7
 8000b7a:	eb04 0903 	add.w	r9, r4, r3
 8000b7e:	f000 f917 	bl	8000db0 <_sbrk_r>
 8000b82:	4581      	cmp	r9, r0
 8000b84:	d13f      	bne.n	8000c06 <_malloc_r+0xe6>
 8000b86:	6821      	ldr	r1, [r4, #0]
 8000b88:	1a6d      	subs	r5, r5, r1
 8000b8a:	4629      	mov	r1, r5
 8000b8c:	4638      	mov	r0, r7
 8000b8e:	f7ff ffa7 	bl	8000ae0 <sbrk_aligned>
 8000b92:	3001      	adds	r0, #1
 8000b94:	d037      	beq.n	8000c06 <_malloc_r+0xe6>
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	442b      	add	r3, r5
 8000b9a:	6023      	str	r3, [r4, #0]
 8000b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d038      	beq.n	8000c16 <_malloc_r+0xf6>
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	42a2      	cmp	r2, r4
 8000ba8:	d12b      	bne.n	8000c02 <_malloc_r+0xe2>
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	e00f      	b.n	8000bd0 <_malloc_r+0xb0>
 8000bb0:	6822      	ldr	r2, [r4, #0]
 8000bb2:	1b52      	subs	r2, r2, r5
 8000bb4:	d41f      	bmi.n	8000bf6 <_malloc_r+0xd6>
 8000bb6:	2a0b      	cmp	r2, #11
 8000bb8:	d917      	bls.n	8000bea <_malloc_r+0xca>
 8000bba:	1961      	adds	r1, r4, r5
 8000bbc:	42a3      	cmp	r3, r4
 8000bbe:	6025      	str	r5, [r4, #0]
 8000bc0:	bf18      	it	ne
 8000bc2:	6059      	strne	r1, [r3, #4]
 8000bc4:	6863      	ldr	r3, [r4, #4]
 8000bc6:	bf08      	it	eq
 8000bc8:	f8c8 1000 	streq.w	r1, [r8]
 8000bcc:	5162      	str	r2, [r4, r5]
 8000bce:	604b      	str	r3, [r1, #4]
 8000bd0:	4638      	mov	r0, r7
 8000bd2:	f104 060b 	add.w	r6, r4, #11
 8000bd6:	f000 f829 	bl	8000c2c <__malloc_unlock>
 8000bda:	f026 0607 	bic.w	r6, r6, #7
 8000bde:	1d23      	adds	r3, r4, #4
 8000be0:	1af2      	subs	r2, r6, r3
 8000be2:	d0ae      	beq.n	8000b42 <_malloc_r+0x22>
 8000be4:	1b9b      	subs	r3, r3, r6
 8000be6:	50a3      	str	r3, [r4, r2]
 8000be8:	e7ab      	b.n	8000b42 <_malloc_r+0x22>
 8000bea:	42a3      	cmp	r3, r4
 8000bec:	6862      	ldr	r2, [r4, #4]
 8000bee:	d1dd      	bne.n	8000bac <_malloc_r+0x8c>
 8000bf0:	f8c8 2000 	str.w	r2, [r8]
 8000bf4:	e7ec      	b.n	8000bd0 <_malloc_r+0xb0>
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	6864      	ldr	r4, [r4, #4]
 8000bfa:	e7ac      	b.n	8000b56 <_malloc_r+0x36>
 8000bfc:	4634      	mov	r4, r6
 8000bfe:	6876      	ldr	r6, [r6, #4]
 8000c00:	e7b4      	b.n	8000b6c <_malloc_r+0x4c>
 8000c02:	4613      	mov	r3, r2
 8000c04:	e7cc      	b.n	8000ba0 <_malloc_r+0x80>
 8000c06:	230c      	movs	r3, #12
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	f000 f80e 	bl	8000c2c <__malloc_unlock>
 8000c10:	e797      	b.n	8000b42 <_malloc_r+0x22>
 8000c12:	6025      	str	r5, [r4, #0]
 8000c14:	e7dc      	b.n	8000bd0 <_malloc_r+0xb0>
 8000c16:	605b      	str	r3, [r3, #4]
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	bf00      	nop
 8000c1c:	2000076c 	.word	0x2000076c

08000c20 <__malloc_lock>:
 8000c20:	4801      	ldr	r0, [pc, #4]	; (8000c28 <__malloc_lock+0x8>)
 8000c22:	f7ff beea 	b.w	80009fa <__retarget_lock_acquire_recursive>
 8000c26:	bf00      	nop
 8000c28:	20000768 	.word	0x20000768

08000c2c <__malloc_unlock>:
 8000c2c:	4801      	ldr	r0, [pc, #4]	; (8000c34 <__malloc_unlock+0x8>)
 8000c2e:	f7ff bee5 	b.w	80009fc <__retarget_lock_release_recursive>
 8000c32:	bf00      	nop
 8000c34:	20000768 	.word	0x20000768

08000c38 <__sflush_r>:
 8000c38:	898a      	ldrh	r2, [r1, #12]
 8000c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3c:	4605      	mov	r5, r0
 8000c3e:	0710      	lsls	r0, r2, #28
 8000c40:	460c      	mov	r4, r1
 8000c42:	d457      	bmi.n	8000cf4 <__sflush_r+0xbc>
 8000c44:	684b      	ldr	r3, [r1, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	dc04      	bgt.n	8000c54 <__sflush_r+0x1c>
 8000c4a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	dc01      	bgt.n	8000c54 <__sflush_r+0x1c>
 8000c50:	2000      	movs	r0, #0
 8000c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	d0fa      	beq.n	8000c50 <__sflush_r+0x18>
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c60:	682f      	ldr	r7, [r5, #0]
 8000c62:	6a21      	ldr	r1, [r4, #32]
 8000c64:	602b      	str	r3, [r5, #0]
 8000c66:	d032      	beq.n	8000cce <__sflush_r+0x96>
 8000c68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c6a:	89a3      	ldrh	r3, [r4, #12]
 8000c6c:	075a      	lsls	r2, r3, #29
 8000c6e:	d505      	bpl.n	8000c7c <__sflush_r+0x44>
 8000c70:	6863      	ldr	r3, [r4, #4]
 8000c72:	1ac0      	subs	r0, r0, r3
 8000c74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c76:	b10b      	cbz	r3, 8000c7c <__sflush_r+0x44>
 8000c78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c7a:	1ac0      	subs	r0, r0, r3
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4602      	mov	r2, r0
 8000c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c82:	6a21      	ldr	r1, [r4, #32]
 8000c84:	4628      	mov	r0, r5
 8000c86:	47b0      	blx	r6
 8000c88:	1c43      	adds	r3, r0, #1
 8000c8a:	89a3      	ldrh	r3, [r4, #12]
 8000c8c:	d106      	bne.n	8000c9c <__sflush_r+0x64>
 8000c8e:	6829      	ldr	r1, [r5, #0]
 8000c90:	291d      	cmp	r1, #29
 8000c92:	d82b      	bhi.n	8000cec <__sflush_r+0xb4>
 8000c94:	4a28      	ldr	r2, [pc, #160]	; (8000d38 <__sflush_r+0x100>)
 8000c96:	410a      	asrs	r2, r1
 8000c98:	07d6      	lsls	r6, r2, #31
 8000c9a:	d427      	bmi.n	8000cec <__sflush_r+0xb4>
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6062      	str	r2, [r4, #4]
 8000ca0:	04d9      	lsls	r1, r3, #19
 8000ca2:	6922      	ldr	r2, [r4, #16]
 8000ca4:	6022      	str	r2, [r4, #0]
 8000ca6:	d504      	bpl.n	8000cb2 <__sflush_r+0x7a>
 8000ca8:	1c42      	adds	r2, r0, #1
 8000caa:	d101      	bne.n	8000cb0 <__sflush_r+0x78>
 8000cac:	682b      	ldr	r3, [r5, #0]
 8000cae:	b903      	cbnz	r3, 8000cb2 <__sflush_r+0x7a>
 8000cb0:	6560      	str	r0, [r4, #84]	; 0x54
 8000cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cb4:	602f      	str	r7, [r5, #0]
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d0ca      	beq.n	8000c50 <__sflush_r+0x18>
 8000cba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	d002      	beq.n	8000cc8 <__sflush_r+0x90>
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	f7ff feba 	bl	8000a3c <_free_r>
 8000cc8:	2000      	movs	r0, #0
 8000cca:	6360      	str	r0, [r4, #52]	; 0x34
 8000ccc:	e7c1      	b.n	8000c52 <__sflush_r+0x1a>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	47b0      	blx	r6
 8000cd4:	1c41      	adds	r1, r0, #1
 8000cd6:	d1c8      	bne.n	8000c6a <__sflush_r+0x32>
 8000cd8:	682b      	ldr	r3, [r5, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0c5      	beq.n	8000c6a <__sflush_r+0x32>
 8000cde:	2b1d      	cmp	r3, #29
 8000ce0:	d001      	beq.n	8000ce6 <__sflush_r+0xae>
 8000ce2:	2b16      	cmp	r3, #22
 8000ce4:	d101      	bne.n	8000cea <__sflush_r+0xb2>
 8000ce6:	602f      	str	r7, [r5, #0]
 8000ce8:	e7b2      	b.n	8000c50 <__sflush_r+0x18>
 8000cea:	89a3      	ldrh	r3, [r4, #12]
 8000cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf0:	81a3      	strh	r3, [r4, #12]
 8000cf2:	e7ae      	b.n	8000c52 <__sflush_r+0x1a>
 8000cf4:	690f      	ldr	r7, [r1, #16]
 8000cf6:	2f00      	cmp	r7, #0
 8000cf8:	d0aa      	beq.n	8000c50 <__sflush_r+0x18>
 8000cfa:	0793      	lsls	r3, r2, #30
 8000cfc:	680e      	ldr	r6, [r1, #0]
 8000cfe:	bf08      	it	eq
 8000d00:	694b      	ldreq	r3, [r1, #20]
 8000d02:	600f      	str	r7, [r1, #0]
 8000d04:	bf18      	it	ne
 8000d06:	2300      	movne	r3, #0
 8000d08:	1bf6      	subs	r6, r6, r7
 8000d0a:	608b      	str	r3, [r1, #8]
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	dd9f      	ble.n	8000c50 <__sflush_r+0x18>
 8000d10:	6a21      	ldr	r1, [r4, #32]
 8000d12:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000d16:	4633      	mov	r3, r6
 8000d18:	463a      	mov	r2, r7
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	47e0      	blx	ip
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	dc06      	bgt.n	8000d30 <__sflush_r+0xf8>
 8000d22:	89a3      	ldrh	r3, [r4, #12]
 8000d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d28:	81a3      	strh	r3, [r4, #12]
 8000d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2e:	e790      	b.n	8000c52 <__sflush_r+0x1a>
 8000d30:	4407      	add	r7, r0
 8000d32:	1a36      	subs	r6, r6, r0
 8000d34:	e7ea      	b.n	8000d0c <__sflush_r+0xd4>
 8000d36:	bf00      	nop
 8000d38:	dfbffffe 	.word	0xdfbffffe

08000d3c <_fflush_r>:
 8000d3c:	b538      	push	{r3, r4, r5, lr}
 8000d3e:	690b      	ldr	r3, [r1, #16]
 8000d40:	4605      	mov	r5, r0
 8000d42:	460c      	mov	r4, r1
 8000d44:	b913      	cbnz	r3, 8000d4c <_fflush_r+0x10>
 8000d46:	2500      	movs	r5, #0
 8000d48:	4628      	mov	r0, r5
 8000d4a:	bd38      	pop	{r3, r4, r5, pc}
 8000d4c:	b118      	cbz	r0, 8000d56 <_fflush_r+0x1a>
 8000d4e:	6a03      	ldr	r3, [r0, #32]
 8000d50:	b90b      	cbnz	r3, 8000d56 <_fflush_r+0x1a>
 8000d52:	f7ff fd5f 	bl	8000814 <__sinit>
 8000d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f3      	beq.n	8000d46 <_fflush_r+0xa>
 8000d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d60:	07d0      	lsls	r0, r2, #31
 8000d62:	d404      	bmi.n	8000d6e <_fflush_r+0x32>
 8000d64:	0599      	lsls	r1, r3, #22
 8000d66:	d402      	bmi.n	8000d6e <_fflush_r+0x32>
 8000d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d6a:	f7ff fe46 	bl	80009fa <__retarget_lock_acquire_recursive>
 8000d6e:	4628      	mov	r0, r5
 8000d70:	4621      	mov	r1, r4
 8000d72:	f7ff ff61 	bl	8000c38 <__sflush_r>
 8000d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d78:	07da      	lsls	r2, r3, #31
 8000d7a:	4605      	mov	r5, r0
 8000d7c:	d4e4      	bmi.n	8000d48 <_fflush_r+0xc>
 8000d7e:	89a3      	ldrh	r3, [r4, #12]
 8000d80:	059b      	lsls	r3, r3, #22
 8000d82:	d4e1      	bmi.n	8000d48 <_fflush_r+0xc>
 8000d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d86:	f7ff fe39 	bl	80009fc <__retarget_lock_release_recursive>
 8000d8a:	e7dd      	b.n	8000d48 <_fflush_r+0xc>

08000d8c <fiprintf>:
 8000d8c:	b40e      	push	{r1, r2, r3}
 8000d8e:	b503      	push	{r0, r1, lr}
 8000d90:	4601      	mov	r1, r0
 8000d92:	ab03      	add	r3, sp, #12
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <fiprintf+0x20>)
 8000d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d9a:	6800      	ldr	r0, [r0, #0]
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	f000 f845 	bl	8000e2c <_vfiprintf_r>
 8000da2:	b002      	add	sp, #8
 8000da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000da8:	b003      	add	sp, #12
 8000daa:	4770      	bx	lr
 8000dac:	20000604 	.word	0x20000604

08000db0 <_sbrk_r>:
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	4d06      	ldr	r5, [pc, #24]	; (8000dcc <_sbrk_r+0x1c>)
 8000db4:	2300      	movs	r3, #0
 8000db6:	4604      	mov	r4, r0
 8000db8:	4608      	mov	r0, r1
 8000dba:	602b      	str	r3, [r5, #0]
 8000dbc:	f7ff fc00 	bl	80005c0 <_sbrk>
 8000dc0:	1c43      	adds	r3, r0, #1
 8000dc2:	d102      	bne.n	8000dca <_sbrk_r+0x1a>
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	b103      	cbz	r3, 8000dca <_sbrk_r+0x1a>
 8000dc8:	6023      	str	r3, [r4, #0]
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
 8000dcc:	20000764 	.word	0x20000764

08000dd0 <abort>:
 8000dd0:	b508      	push	{r3, lr}
 8000dd2:	2006      	movs	r0, #6
 8000dd4:	f000 fb92 	bl	80014fc <raise>
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff fb7d 	bl	80004d8 <_exit>

08000dde <__sfputc_r>:
 8000dde:	6893      	ldr	r3, [r2, #8]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	b410      	push	{r4}
 8000de6:	6093      	str	r3, [r2, #8]
 8000de8:	da07      	bge.n	8000dfa <__sfputc_r+0x1c>
 8000dea:	6994      	ldr	r4, [r2, #24]
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	db01      	blt.n	8000df4 <__sfputc_r+0x16>
 8000df0:	290a      	cmp	r1, #10
 8000df2:	d102      	bne.n	8000dfa <__sfputc_r+0x1c>
 8000df4:	bc10      	pop	{r4}
 8000df6:	f000 bac3 	b.w	8001380 <__swbuf_r>
 8000dfa:	6813      	ldr	r3, [r2, #0]
 8000dfc:	1c58      	adds	r0, r3, #1
 8000dfe:	6010      	str	r0, [r2, #0]
 8000e00:	7019      	strb	r1, [r3, #0]
 8000e02:	4608      	mov	r0, r1
 8000e04:	bc10      	pop	{r4}
 8000e06:	4770      	bx	lr

08000e08 <__sfputs_r>:
 8000e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0a:	4606      	mov	r6, r0
 8000e0c:	460f      	mov	r7, r1
 8000e0e:	4614      	mov	r4, r2
 8000e10:	18d5      	adds	r5, r2, r3
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	d101      	bne.n	8000e1a <__sfputs_r+0x12>
 8000e16:	2000      	movs	r0, #0
 8000e18:	e007      	b.n	8000e2a <__sfputs_r+0x22>
 8000e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e1e:	463a      	mov	r2, r7
 8000e20:	4630      	mov	r0, r6
 8000e22:	f7ff ffdc 	bl	8000dde <__sfputc_r>
 8000e26:	1c43      	adds	r3, r0, #1
 8000e28:	d1f3      	bne.n	8000e12 <__sfputs_r+0xa>
 8000e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000e2c <_vfiprintf_r>:
 8000e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e30:	460d      	mov	r5, r1
 8000e32:	b09d      	sub	sp, #116	; 0x74
 8000e34:	4614      	mov	r4, r2
 8000e36:	4698      	mov	r8, r3
 8000e38:	4606      	mov	r6, r0
 8000e3a:	b118      	cbz	r0, 8000e44 <_vfiprintf_r+0x18>
 8000e3c:	6a03      	ldr	r3, [r0, #32]
 8000e3e:	b90b      	cbnz	r3, 8000e44 <_vfiprintf_r+0x18>
 8000e40:	f7ff fce8 	bl	8000814 <__sinit>
 8000e44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e46:	07d9      	lsls	r1, r3, #31
 8000e48:	d405      	bmi.n	8000e56 <_vfiprintf_r+0x2a>
 8000e4a:	89ab      	ldrh	r3, [r5, #12]
 8000e4c:	059a      	lsls	r2, r3, #22
 8000e4e:	d402      	bmi.n	8000e56 <_vfiprintf_r+0x2a>
 8000e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e52:	f7ff fdd2 	bl	80009fa <__retarget_lock_acquire_recursive>
 8000e56:	89ab      	ldrh	r3, [r5, #12]
 8000e58:	071b      	lsls	r3, r3, #28
 8000e5a:	d501      	bpl.n	8000e60 <_vfiprintf_r+0x34>
 8000e5c:	692b      	ldr	r3, [r5, #16]
 8000e5e:	b99b      	cbnz	r3, 8000e88 <_vfiprintf_r+0x5c>
 8000e60:	4629      	mov	r1, r5
 8000e62:	4630      	mov	r0, r6
 8000e64:	f000 faca 	bl	80013fc <__swsetup_r>
 8000e68:	b170      	cbz	r0, 8000e88 <_vfiprintf_r+0x5c>
 8000e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e6c:	07dc      	lsls	r4, r3, #31
 8000e6e:	d504      	bpl.n	8000e7a <_vfiprintf_r+0x4e>
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	b01d      	add	sp, #116	; 0x74
 8000e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e7a:	89ab      	ldrh	r3, [r5, #12]
 8000e7c:	0598      	lsls	r0, r3, #22
 8000e7e:	d4f7      	bmi.n	8000e70 <_vfiprintf_r+0x44>
 8000e80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e82:	f7ff fdbb 	bl	80009fc <__retarget_lock_release_recursive>
 8000e86:	e7f3      	b.n	8000e70 <_vfiprintf_r+0x44>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e92:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e96:	2330      	movs	r3, #48	; 0x30
 8000e98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800104c <_vfiprintf_r+0x220>
 8000e9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ea0:	f04f 0901 	mov.w	r9, #1
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000eac:	b10a      	cbz	r2, 8000eb2 <_vfiprintf_r+0x86>
 8000eae:	2a25      	cmp	r2, #37	; 0x25
 8000eb0:	d1f9      	bne.n	8000ea6 <_vfiprintf_r+0x7a>
 8000eb2:	ebba 0b04 	subs.w	fp, sl, r4
 8000eb6:	d00b      	beq.n	8000ed0 <_vfiprintf_r+0xa4>
 8000eb8:	465b      	mov	r3, fp
 8000eba:	4622      	mov	r2, r4
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	f7ff ffa2 	bl	8000e08 <__sfputs_r>
 8000ec4:	3001      	adds	r0, #1
 8000ec6:	f000 80a9 	beq.w	800101c <_vfiprintf_r+0x1f0>
 8000eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ecc:	445a      	add	r2, fp
 8000ece:	9209      	str	r2, [sp, #36]	; 0x24
 8000ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80a1 	beq.w	800101c <_vfiprintf_r+0x1f0>
 8000eda:	2300      	movs	r3, #0
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ee4:	f10a 0a01 	add.w	sl, sl, #1
 8000ee8:	9304      	str	r3, [sp, #16]
 8000eea:	9307      	str	r3, [sp, #28]
 8000eec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ef0:	931a      	str	r3, [sp, #104]	; 0x68
 8000ef2:	4654      	mov	r4, sl
 8000ef4:	2205      	movs	r2, #5
 8000ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000efa:	4854      	ldr	r0, [pc, #336]	; (800104c <_vfiprintf_r+0x220>)
 8000efc:	f7ff f978 	bl	80001f0 <memchr>
 8000f00:	9a04      	ldr	r2, [sp, #16]
 8000f02:	b9d8      	cbnz	r0, 8000f3c <_vfiprintf_r+0x110>
 8000f04:	06d1      	lsls	r1, r2, #27
 8000f06:	bf44      	itt	mi
 8000f08:	2320      	movmi	r3, #32
 8000f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f0e:	0713      	lsls	r3, r2, #28
 8000f10:	bf44      	itt	mi
 8000f12:	232b      	movmi	r3, #43	; 0x2b
 8000f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f18:	f89a 3000 	ldrb.w	r3, [sl]
 8000f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8000f1e:	d015      	beq.n	8000f4c <_vfiprintf_r+0x120>
 8000f20:	9a07      	ldr	r2, [sp, #28]
 8000f22:	4654      	mov	r4, sl
 8000f24:	2000      	movs	r0, #0
 8000f26:	f04f 0c0a 	mov.w	ip, #10
 8000f2a:	4621      	mov	r1, r4
 8000f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f30:	3b30      	subs	r3, #48	; 0x30
 8000f32:	2b09      	cmp	r3, #9
 8000f34:	d94d      	bls.n	8000fd2 <_vfiprintf_r+0x1a6>
 8000f36:	b1b0      	cbz	r0, 8000f66 <_vfiprintf_r+0x13a>
 8000f38:	9207      	str	r2, [sp, #28]
 8000f3a:	e014      	b.n	8000f66 <_vfiprintf_r+0x13a>
 8000f3c:	eba0 0308 	sub.w	r3, r0, r8
 8000f40:	fa09 f303 	lsl.w	r3, r9, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	9304      	str	r3, [sp, #16]
 8000f48:	46a2      	mov	sl, r4
 8000f4a:	e7d2      	b.n	8000ef2 <_vfiprintf_r+0xc6>
 8000f4c:	9b03      	ldr	r3, [sp, #12]
 8000f4e:	1d19      	adds	r1, r3, #4
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	9103      	str	r1, [sp, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bfbb      	ittet	lt
 8000f58:	425b      	neglt	r3, r3
 8000f5a:	f042 0202 	orrlt.w	r2, r2, #2
 8000f5e:	9307      	strge	r3, [sp, #28]
 8000f60:	9307      	strlt	r3, [sp, #28]
 8000f62:	bfb8      	it	lt
 8000f64:	9204      	strlt	r2, [sp, #16]
 8000f66:	7823      	ldrb	r3, [r4, #0]
 8000f68:	2b2e      	cmp	r3, #46	; 0x2e
 8000f6a:	d10c      	bne.n	8000f86 <_vfiprintf_r+0x15a>
 8000f6c:	7863      	ldrb	r3, [r4, #1]
 8000f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8000f70:	d134      	bne.n	8000fdc <_vfiprintf_r+0x1b0>
 8000f72:	9b03      	ldr	r3, [sp, #12]
 8000f74:	1d1a      	adds	r2, r3, #4
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	9203      	str	r2, [sp, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bfb8      	it	lt
 8000f7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f82:	3402      	adds	r4, #2
 8000f84:	9305      	str	r3, [sp, #20]
 8000f86:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001050 <_vfiprintf_r+0x224>
 8000f8a:	7821      	ldrb	r1, [r4, #0]
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	4650      	mov	r0, sl
 8000f90:	f7ff f92e 	bl	80001f0 <memchr>
 8000f94:	b138      	cbz	r0, 8000fa6 <_vfiprintf_r+0x17a>
 8000f96:	9b04      	ldr	r3, [sp, #16]
 8000f98:	eba0 000a 	sub.w	r0, r0, sl
 8000f9c:	2240      	movs	r2, #64	; 0x40
 8000f9e:	4082      	lsls	r2, r0
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	3401      	adds	r4, #1
 8000fa4:	9304      	str	r3, [sp, #16]
 8000fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000faa:	482a      	ldr	r0, [pc, #168]	; (8001054 <_vfiprintf_r+0x228>)
 8000fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000fb0:	2206      	movs	r2, #6
 8000fb2:	f7ff f91d 	bl	80001f0 <memchr>
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	d03f      	beq.n	800103a <_vfiprintf_r+0x20e>
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <_vfiprintf_r+0x22c>)
 8000fbc:	bb1b      	cbnz	r3, 8001006 <_vfiprintf_r+0x1da>
 8000fbe:	9b03      	ldr	r3, [sp, #12]
 8000fc0:	3307      	adds	r3, #7
 8000fc2:	f023 0307 	bic.w	r3, r3, #7
 8000fc6:	3308      	adds	r3, #8
 8000fc8:	9303      	str	r3, [sp, #12]
 8000fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fcc:	443b      	add	r3, r7
 8000fce:	9309      	str	r3, [sp, #36]	; 0x24
 8000fd0:	e768      	b.n	8000ea4 <_vfiprintf_r+0x78>
 8000fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fd6:	460c      	mov	r4, r1
 8000fd8:	2001      	movs	r0, #1
 8000fda:	e7a6      	b.n	8000f2a <_vfiprintf_r+0xfe>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	3401      	adds	r4, #1
 8000fe0:	9305      	str	r3, [sp, #20]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 0c0a 	mov.w	ip, #10
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fee:	3a30      	subs	r2, #48	; 0x30
 8000ff0:	2a09      	cmp	r2, #9
 8000ff2:	d903      	bls.n	8000ffc <_vfiprintf_r+0x1d0>
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0c6      	beq.n	8000f86 <_vfiprintf_r+0x15a>
 8000ff8:	9105      	str	r1, [sp, #20]
 8000ffa:	e7c4      	b.n	8000f86 <_vfiprintf_r+0x15a>
 8000ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001000:	4604      	mov	r4, r0
 8001002:	2301      	movs	r3, #1
 8001004:	e7f0      	b.n	8000fe8 <_vfiprintf_r+0x1bc>
 8001006:	ab03      	add	r3, sp, #12
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	462a      	mov	r2, r5
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_vfiprintf_r+0x230>)
 800100e:	a904      	add	r1, sp, #16
 8001010:	4630      	mov	r0, r6
 8001012:	f3af 8000 	nop.w
 8001016:	4607      	mov	r7, r0
 8001018:	1c78      	adds	r0, r7, #1
 800101a:	d1d6      	bne.n	8000fca <_vfiprintf_r+0x19e>
 800101c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800101e:	07d9      	lsls	r1, r3, #31
 8001020:	d405      	bmi.n	800102e <_vfiprintf_r+0x202>
 8001022:	89ab      	ldrh	r3, [r5, #12]
 8001024:	059a      	lsls	r2, r3, #22
 8001026:	d402      	bmi.n	800102e <_vfiprintf_r+0x202>
 8001028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800102a:	f7ff fce7 	bl	80009fc <__retarget_lock_release_recursive>
 800102e:	89ab      	ldrh	r3, [r5, #12]
 8001030:	065b      	lsls	r3, r3, #25
 8001032:	f53f af1d 	bmi.w	8000e70 <_vfiprintf_r+0x44>
 8001036:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001038:	e71c      	b.n	8000e74 <_vfiprintf_r+0x48>
 800103a:	ab03      	add	r3, sp, #12
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	462a      	mov	r2, r5
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <_vfiprintf_r+0x230>)
 8001042:	a904      	add	r1, sp, #16
 8001044:	4630      	mov	r0, r6
 8001046:	f000 f879 	bl	800113c <_printf_i>
 800104a:	e7e4      	b.n	8001016 <_vfiprintf_r+0x1ea>
 800104c:	08001713 	.word	0x08001713
 8001050:	08001719 	.word	0x08001719
 8001054:	0800171d 	.word	0x0800171d
 8001058:	00000000 	.word	0x00000000
 800105c:	08000e09 	.word	0x08000e09

08001060 <_printf_common>:
 8001060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001064:	4616      	mov	r6, r2
 8001066:	4699      	mov	r9, r3
 8001068:	688a      	ldr	r2, [r1, #8]
 800106a:	690b      	ldr	r3, [r1, #16]
 800106c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001070:	4293      	cmp	r3, r2
 8001072:	bfb8      	it	lt
 8001074:	4613      	movlt	r3, r2
 8001076:	6033      	str	r3, [r6, #0]
 8001078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800107c:	4607      	mov	r7, r0
 800107e:	460c      	mov	r4, r1
 8001080:	b10a      	cbz	r2, 8001086 <_printf_common+0x26>
 8001082:	3301      	adds	r3, #1
 8001084:	6033      	str	r3, [r6, #0]
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	0699      	lsls	r1, r3, #26
 800108a:	bf42      	ittt	mi
 800108c:	6833      	ldrmi	r3, [r6, #0]
 800108e:	3302      	addmi	r3, #2
 8001090:	6033      	strmi	r3, [r6, #0]
 8001092:	6825      	ldr	r5, [r4, #0]
 8001094:	f015 0506 	ands.w	r5, r5, #6
 8001098:	d106      	bne.n	80010a8 <_printf_common+0x48>
 800109a:	f104 0a19 	add.w	sl, r4, #25
 800109e:	68e3      	ldr	r3, [r4, #12]
 80010a0:	6832      	ldr	r2, [r6, #0]
 80010a2:	1a9b      	subs	r3, r3, r2
 80010a4:	42ab      	cmp	r3, r5
 80010a6:	dc26      	bgt.n	80010f6 <_printf_common+0x96>
 80010a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80010ac:	1e13      	subs	r3, r2, #0
 80010ae:	6822      	ldr	r2, [r4, #0]
 80010b0:	bf18      	it	ne
 80010b2:	2301      	movne	r3, #1
 80010b4:	0692      	lsls	r2, r2, #26
 80010b6:	d42b      	bmi.n	8001110 <_printf_common+0xb0>
 80010b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80010bc:	4649      	mov	r1, r9
 80010be:	4638      	mov	r0, r7
 80010c0:	47c0      	blx	r8
 80010c2:	3001      	adds	r0, #1
 80010c4:	d01e      	beq.n	8001104 <_printf_common+0xa4>
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	6922      	ldr	r2, [r4, #16]
 80010ca:	f003 0306 	and.w	r3, r3, #6
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf02      	ittt	eq
 80010d2:	68e5      	ldreq	r5, [r4, #12]
 80010d4:	6833      	ldreq	r3, [r6, #0]
 80010d6:	1aed      	subeq	r5, r5, r3
 80010d8:	68a3      	ldr	r3, [r4, #8]
 80010da:	bf0c      	ite	eq
 80010dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010e0:	2500      	movne	r5, #0
 80010e2:	4293      	cmp	r3, r2
 80010e4:	bfc4      	itt	gt
 80010e6:	1a9b      	subgt	r3, r3, r2
 80010e8:	18ed      	addgt	r5, r5, r3
 80010ea:	2600      	movs	r6, #0
 80010ec:	341a      	adds	r4, #26
 80010ee:	42b5      	cmp	r5, r6
 80010f0:	d11a      	bne.n	8001128 <_printf_common+0xc8>
 80010f2:	2000      	movs	r0, #0
 80010f4:	e008      	b.n	8001108 <_printf_common+0xa8>
 80010f6:	2301      	movs	r3, #1
 80010f8:	4652      	mov	r2, sl
 80010fa:	4649      	mov	r1, r9
 80010fc:	4638      	mov	r0, r7
 80010fe:	47c0      	blx	r8
 8001100:	3001      	adds	r0, #1
 8001102:	d103      	bne.n	800110c <_printf_common+0xac>
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800110c:	3501      	adds	r5, #1
 800110e:	e7c6      	b.n	800109e <_printf_common+0x3e>
 8001110:	18e1      	adds	r1, r4, r3
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	2030      	movs	r0, #48	; 0x30
 8001116:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800111a:	4422      	add	r2, r4
 800111c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001120:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001124:	3302      	adds	r3, #2
 8001126:	e7c7      	b.n	80010b8 <_printf_common+0x58>
 8001128:	2301      	movs	r3, #1
 800112a:	4622      	mov	r2, r4
 800112c:	4649      	mov	r1, r9
 800112e:	4638      	mov	r0, r7
 8001130:	47c0      	blx	r8
 8001132:	3001      	adds	r0, #1
 8001134:	d0e6      	beq.n	8001104 <_printf_common+0xa4>
 8001136:	3601      	adds	r6, #1
 8001138:	e7d9      	b.n	80010ee <_printf_common+0x8e>
	...

0800113c <_printf_i>:
 800113c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001140:	7e0f      	ldrb	r7, [r1, #24]
 8001142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001144:	2f78      	cmp	r7, #120	; 0x78
 8001146:	4691      	mov	r9, r2
 8001148:	4680      	mov	r8, r0
 800114a:	460c      	mov	r4, r1
 800114c:	469a      	mov	sl, r3
 800114e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001152:	d807      	bhi.n	8001164 <_printf_i+0x28>
 8001154:	2f62      	cmp	r7, #98	; 0x62
 8001156:	d80a      	bhi.n	800116e <_printf_i+0x32>
 8001158:	2f00      	cmp	r7, #0
 800115a:	f000 80d4 	beq.w	8001306 <_printf_i+0x1ca>
 800115e:	2f58      	cmp	r7, #88	; 0x58
 8001160:	f000 80c0 	beq.w	80012e4 <_printf_i+0x1a8>
 8001164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800116c:	e03a      	b.n	80011e4 <_printf_i+0xa8>
 800116e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001172:	2b15      	cmp	r3, #21
 8001174:	d8f6      	bhi.n	8001164 <_printf_i+0x28>
 8001176:	a101      	add	r1, pc, #4	; (adr r1, 800117c <_printf_i+0x40>)
 8001178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800117c:	080011d5 	.word	0x080011d5
 8001180:	080011e9 	.word	0x080011e9
 8001184:	08001165 	.word	0x08001165
 8001188:	08001165 	.word	0x08001165
 800118c:	08001165 	.word	0x08001165
 8001190:	08001165 	.word	0x08001165
 8001194:	080011e9 	.word	0x080011e9
 8001198:	08001165 	.word	0x08001165
 800119c:	08001165 	.word	0x08001165
 80011a0:	08001165 	.word	0x08001165
 80011a4:	08001165 	.word	0x08001165
 80011a8:	080012ed 	.word	0x080012ed
 80011ac:	08001215 	.word	0x08001215
 80011b0:	080012a7 	.word	0x080012a7
 80011b4:	08001165 	.word	0x08001165
 80011b8:	08001165 	.word	0x08001165
 80011bc:	0800130f 	.word	0x0800130f
 80011c0:	08001165 	.word	0x08001165
 80011c4:	08001215 	.word	0x08001215
 80011c8:	08001165 	.word	0x08001165
 80011cc:	08001165 	.word	0x08001165
 80011d0:	080012af 	.word	0x080012af
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	1d1a      	adds	r2, r3, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	602a      	str	r2, [r5, #0]
 80011dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80011e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80011e4:	2301      	movs	r3, #1
 80011e6:	e09f      	b.n	8001328 <_printf_i+0x1ec>
 80011e8:	6820      	ldr	r0, [r4, #0]
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	0607      	lsls	r7, r0, #24
 80011ee:	f103 0104 	add.w	r1, r3, #4
 80011f2:	6029      	str	r1, [r5, #0]
 80011f4:	d501      	bpl.n	80011fa <_printf_i+0xbe>
 80011f6:	681e      	ldr	r6, [r3, #0]
 80011f8:	e003      	b.n	8001202 <_printf_i+0xc6>
 80011fa:	0646      	lsls	r6, r0, #25
 80011fc:	d5fb      	bpl.n	80011f6 <_printf_i+0xba>
 80011fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001202:	2e00      	cmp	r6, #0
 8001204:	da03      	bge.n	800120e <_printf_i+0xd2>
 8001206:	232d      	movs	r3, #45	; 0x2d
 8001208:	4276      	negs	r6, r6
 800120a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800120e:	485a      	ldr	r0, [pc, #360]	; (8001378 <_printf_i+0x23c>)
 8001210:	230a      	movs	r3, #10
 8001212:	e012      	b.n	800123a <_printf_i+0xfe>
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	6820      	ldr	r0, [r4, #0]
 8001218:	1d19      	adds	r1, r3, #4
 800121a:	6029      	str	r1, [r5, #0]
 800121c:	0605      	lsls	r5, r0, #24
 800121e:	d501      	bpl.n	8001224 <_printf_i+0xe8>
 8001220:	681e      	ldr	r6, [r3, #0]
 8001222:	e002      	b.n	800122a <_printf_i+0xee>
 8001224:	0641      	lsls	r1, r0, #25
 8001226:	d5fb      	bpl.n	8001220 <_printf_i+0xe4>
 8001228:	881e      	ldrh	r6, [r3, #0]
 800122a:	4853      	ldr	r0, [pc, #332]	; (8001378 <_printf_i+0x23c>)
 800122c:	2f6f      	cmp	r7, #111	; 0x6f
 800122e:	bf0c      	ite	eq
 8001230:	2308      	moveq	r3, #8
 8001232:	230a      	movne	r3, #10
 8001234:	2100      	movs	r1, #0
 8001236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800123a:	6865      	ldr	r5, [r4, #4]
 800123c:	60a5      	str	r5, [r4, #8]
 800123e:	2d00      	cmp	r5, #0
 8001240:	bfa2      	ittt	ge
 8001242:	6821      	ldrge	r1, [r4, #0]
 8001244:	f021 0104 	bicge.w	r1, r1, #4
 8001248:	6021      	strge	r1, [r4, #0]
 800124a:	b90e      	cbnz	r6, 8001250 <_printf_i+0x114>
 800124c:	2d00      	cmp	r5, #0
 800124e:	d04b      	beq.n	80012e8 <_printf_i+0x1ac>
 8001250:	4615      	mov	r5, r2
 8001252:	fbb6 f1f3 	udiv	r1, r6, r3
 8001256:	fb03 6711 	mls	r7, r3, r1, r6
 800125a:	5dc7      	ldrb	r7, [r0, r7]
 800125c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001260:	4637      	mov	r7, r6
 8001262:	42bb      	cmp	r3, r7
 8001264:	460e      	mov	r6, r1
 8001266:	d9f4      	bls.n	8001252 <_printf_i+0x116>
 8001268:	2b08      	cmp	r3, #8
 800126a:	d10b      	bne.n	8001284 <_printf_i+0x148>
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	07de      	lsls	r6, r3, #31
 8001270:	d508      	bpl.n	8001284 <_printf_i+0x148>
 8001272:	6923      	ldr	r3, [r4, #16]
 8001274:	6861      	ldr	r1, [r4, #4]
 8001276:	4299      	cmp	r1, r3
 8001278:	bfde      	ittt	le
 800127a:	2330      	movle	r3, #48	; 0x30
 800127c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001280:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001284:	1b52      	subs	r2, r2, r5
 8001286:	6122      	str	r2, [r4, #16]
 8001288:	f8cd a000 	str.w	sl, [sp]
 800128c:	464b      	mov	r3, r9
 800128e:	aa03      	add	r2, sp, #12
 8001290:	4621      	mov	r1, r4
 8001292:	4640      	mov	r0, r8
 8001294:	f7ff fee4 	bl	8001060 <_printf_common>
 8001298:	3001      	adds	r0, #1
 800129a:	d14a      	bne.n	8001332 <_printf_i+0x1f6>
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	b004      	add	sp, #16
 80012a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	6023      	str	r3, [r4, #0]
 80012ae:	4833      	ldr	r0, [pc, #204]	; (800137c <_printf_i+0x240>)
 80012b0:	2778      	movs	r7, #120	; 0x78
 80012b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	6829      	ldr	r1, [r5, #0]
 80012ba:	061f      	lsls	r7, r3, #24
 80012bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80012c0:	d402      	bmi.n	80012c8 <_printf_i+0x18c>
 80012c2:	065f      	lsls	r7, r3, #25
 80012c4:	bf48      	it	mi
 80012c6:	b2b6      	uxthmi	r6, r6
 80012c8:	07df      	lsls	r7, r3, #31
 80012ca:	bf48      	it	mi
 80012cc:	f043 0320 	orrmi.w	r3, r3, #32
 80012d0:	6029      	str	r1, [r5, #0]
 80012d2:	bf48      	it	mi
 80012d4:	6023      	strmi	r3, [r4, #0]
 80012d6:	b91e      	cbnz	r6, 80012e0 <_printf_i+0x1a4>
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	f023 0320 	bic.w	r3, r3, #32
 80012de:	6023      	str	r3, [r4, #0]
 80012e0:	2310      	movs	r3, #16
 80012e2:	e7a7      	b.n	8001234 <_printf_i+0xf8>
 80012e4:	4824      	ldr	r0, [pc, #144]	; (8001378 <_printf_i+0x23c>)
 80012e6:	e7e4      	b.n	80012b2 <_printf_i+0x176>
 80012e8:	4615      	mov	r5, r2
 80012ea:	e7bd      	b.n	8001268 <_printf_i+0x12c>
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	6826      	ldr	r6, [r4, #0]
 80012f0:	6961      	ldr	r1, [r4, #20]
 80012f2:	1d18      	adds	r0, r3, #4
 80012f4:	6028      	str	r0, [r5, #0]
 80012f6:	0635      	lsls	r5, r6, #24
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	d501      	bpl.n	8001300 <_printf_i+0x1c4>
 80012fc:	6019      	str	r1, [r3, #0]
 80012fe:	e002      	b.n	8001306 <_printf_i+0x1ca>
 8001300:	0670      	lsls	r0, r6, #25
 8001302:	d5fb      	bpl.n	80012fc <_printf_i+0x1c0>
 8001304:	8019      	strh	r1, [r3, #0]
 8001306:	2300      	movs	r3, #0
 8001308:	6123      	str	r3, [r4, #16]
 800130a:	4615      	mov	r5, r2
 800130c:	e7bc      	b.n	8001288 <_printf_i+0x14c>
 800130e:	682b      	ldr	r3, [r5, #0]
 8001310:	1d1a      	adds	r2, r3, #4
 8001312:	602a      	str	r2, [r5, #0]
 8001314:	681d      	ldr	r5, [r3, #0]
 8001316:	6862      	ldr	r2, [r4, #4]
 8001318:	2100      	movs	r1, #0
 800131a:	4628      	mov	r0, r5
 800131c:	f7fe ff68 	bl	80001f0 <memchr>
 8001320:	b108      	cbz	r0, 8001326 <_printf_i+0x1ea>
 8001322:	1b40      	subs	r0, r0, r5
 8001324:	6060      	str	r0, [r4, #4]
 8001326:	6863      	ldr	r3, [r4, #4]
 8001328:	6123      	str	r3, [r4, #16]
 800132a:	2300      	movs	r3, #0
 800132c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001330:	e7aa      	b.n	8001288 <_printf_i+0x14c>
 8001332:	6923      	ldr	r3, [r4, #16]
 8001334:	462a      	mov	r2, r5
 8001336:	4649      	mov	r1, r9
 8001338:	4640      	mov	r0, r8
 800133a:	47d0      	blx	sl
 800133c:	3001      	adds	r0, #1
 800133e:	d0ad      	beq.n	800129c <_printf_i+0x160>
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	079b      	lsls	r3, r3, #30
 8001344:	d413      	bmi.n	800136e <_printf_i+0x232>
 8001346:	68e0      	ldr	r0, [r4, #12]
 8001348:	9b03      	ldr	r3, [sp, #12]
 800134a:	4298      	cmp	r0, r3
 800134c:	bfb8      	it	lt
 800134e:	4618      	movlt	r0, r3
 8001350:	e7a6      	b.n	80012a0 <_printf_i+0x164>
 8001352:	2301      	movs	r3, #1
 8001354:	4632      	mov	r2, r6
 8001356:	4649      	mov	r1, r9
 8001358:	4640      	mov	r0, r8
 800135a:	47d0      	blx	sl
 800135c:	3001      	adds	r0, #1
 800135e:	d09d      	beq.n	800129c <_printf_i+0x160>
 8001360:	3501      	adds	r5, #1
 8001362:	68e3      	ldr	r3, [r4, #12]
 8001364:	9903      	ldr	r1, [sp, #12]
 8001366:	1a5b      	subs	r3, r3, r1
 8001368:	42ab      	cmp	r3, r5
 800136a:	dcf2      	bgt.n	8001352 <_printf_i+0x216>
 800136c:	e7eb      	b.n	8001346 <_printf_i+0x20a>
 800136e:	2500      	movs	r5, #0
 8001370:	f104 0619 	add.w	r6, r4, #25
 8001374:	e7f5      	b.n	8001362 <_printf_i+0x226>
 8001376:	bf00      	nop
 8001378:	08001724 	.word	0x08001724
 800137c:	08001735 	.word	0x08001735

08001380 <__swbuf_r>:
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001382:	460e      	mov	r6, r1
 8001384:	4614      	mov	r4, r2
 8001386:	4605      	mov	r5, r0
 8001388:	b118      	cbz	r0, 8001392 <__swbuf_r+0x12>
 800138a:	6a03      	ldr	r3, [r0, #32]
 800138c:	b90b      	cbnz	r3, 8001392 <__swbuf_r+0x12>
 800138e:	f7ff fa41 	bl	8000814 <__sinit>
 8001392:	69a3      	ldr	r3, [r4, #24]
 8001394:	60a3      	str	r3, [r4, #8]
 8001396:	89a3      	ldrh	r3, [r4, #12]
 8001398:	071a      	lsls	r2, r3, #28
 800139a:	d525      	bpl.n	80013e8 <__swbuf_r+0x68>
 800139c:	6923      	ldr	r3, [r4, #16]
 800139e:	b31b      	cbz	r3, 80013e8 <__swbuf_r+0x68>
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	6922      	ldr	r2, [r4, #16]
 80013a4:	1a98      	subs	r0, r3, r2
 80013a6:	6963      	ldr	r3, [r4, #20]
 80013a8:	b2f6      	uxtb	r6, r6
 80013aa:	4283      	cmp	r3, r0
 80013ac:	4637      	mov	r7, r6
 80013ae:	dc04      	bgt.n	80013ba <__swbuf_r+0x3a>
 80013b0:	4621      	mov	r1, r4
 80013b2:	4628      	mov	r0, r5
 80013b4:	f7ff fcc2 	bl	8000d3c <_fflush_r>
 80013b8:	b9e0      	cbnz	r0, 80013f4 <__swbuf_r+0x74>
 80013ba:	68a3      	ldr	r3, [r4, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60a3      	str	r3, [r4, #8]
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	6022      	str	r2, [r4, #0]
 80013c6:	701e      	strb	r6, [r3, #0]
 80013c8:	6962      	ldr	r2, [r4, #20]
 80013ca:	1c43      	adds	r3, r0, #1
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d004      	beq.n	80013da <__swbuf_r+0x5a>
 80013d0:	89a3      	ldrh	r3, [r4, #12]
 80013d2:	07db      	lsls	r3, r3, #31
 80013d4:	d506      	bpl.n	80013e4 <__swbuf_r+0x64>
 80013d6:	2e0a      	cmp	r6, #10
 80013d8:	d104      	bne.n	80013e4 <__swbuf_r+0x64>
 80013da:	4621      	mov	r1, r4
 80013dc:	4628      	mov	r0, r5
 80013de:	f7ff fcad 	bl	8000d3c <_fflush_r>
 80013e2:	b938      	cbnz	r0, 80013f4 <__swbuf_r+0x74>
 80013e4:	4638      	mov	r0, r7
 80013e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013e8:	4621      	mov	r1, r4
 80013ea:	4628      	mov	r0, r5
 80013ec:	f000 f806 	bl	80013fc <__swsetup_r>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d0d5      	beq.n	80013a0 <__swbuf_r+0x20>
 80013f4:	f04f 37ff 	mov.w	r7, #4294967295
 80013f8:	e7f4      	b.n	80013e4 <__swbuf_r+0x64>
	...

080013fc <__swsetup_r>:
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <__swsetup_r+0xac>)
 8001400:	4605      	mov	r5, r0
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	460c      	mov	r4, r1
 8001406:	b118      	cbz	r0, 8001410 <__swsetup_r+0x14>
 8001408:	6a03      	ldr	r3, [r0, #32]
 800140a:	b90b      	cbnz	r3, 8001410 <__swsetup_r+0x14>
 800140c:	f7ff fa02 	bl	8000814 <__sinit>
 8001410:	89a3      	ldrh	r3, [r4, #12]
 8001412:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001416:	0718      	lsls	r0, r3, #28
 8001418:	d422      	bmi.n	8001460 <__swsetup_r+0x64>
 800141a:	06d9      	lsls	r1, r3, #27
 800141c:	d407      	bmi.n	800142e <__swsetup_r+0x32>
 800141e:	2309      	movs	r3, #9
 8001420:	602b      	str	r3, [r5, #0]
 8001422:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001426:	81a3      	strh	r3, [r4, #12]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	e034      	b.n	8001498 <__swsetup_r+0x9c>
 800142e:	0758      	lsls	r0, r3, #29
 8001430:	d512      	bpl.n	8001458 <__swsetup_r+0x5c>
 8001432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001434:	b141      	cbz	r1, 8001448 <__swsetup_r+0x4c>
 8001436:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800143a:	4299      	cmp	r1, r3
 800143c:	d002      	beq.n	8001444 <__swsetup_r+0x48>
 800143e:	4628      	mov	r0, r5
 8001440:	f7ff fafc 	bl	8000a3c <_free_r>
 8001444:	2300      	movs	r3, #0
 8001446:	6363      	str	r3, [r4, #52]	; 0x34
 8001448:	89a3      	ldrh	r3, [r4, #12]
 800144a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800144e:	81a3      	strh	r3, [r4, #12]
 8001450:	2300      	movs	r3, #0
 8001452:	6063      	str	r3, [r4, #4]
 8001454:	6923      	ldr	r3, [r4, #16]
 8001456:	6023      	str	r3, [r4, #0]
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	81a3      	strh	r3, [r4, #12]
 8001460:	6923      	ldr	r3, [r4, #16]
 8001462:	b94b      	cbnz	r3, 8001478 <__swsetup_r+0x7c>
 8001464:	89a3      	ldrh	r3, [r4, #12]
 8001466:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800146a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800146e:	d003      	beq.n	8001478 <__swsetup_r+0x7c>
 8001470:	4621      	mov	r1, r4
 8001472:	4628      	mov	r0, r5
 8001474:	f000 f884 	bl	8001580 <__smakebuf_r>
 8001478:	89a0      	ldrh	r0, [r4, #12]
 800147a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800147e:	f010 0301 	ands.w	r3, r0, #1
 8001482:	d00a      	beq.n	800149a <__swsetup_r+0x9e>
 8001484:	2300      	movs	r3, #0
 8001486:	60a3      	str	r3, [r4, #8]
 8001488:	6963      	ldr	r3, [r4, #20]
 800148a:	425b      	negs	r3, r3
 800148c:	61a3      	str	r3, [r4, #24]
 800148e:	6923      	ldr	r3, [r4, #16]
 8001490:	b943      	cbnz	r3, 80014a4 <__swsetup_r+0xa8>
 8001492:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001496:	d1c4      	bne.n	8001422 <__swsetup_r+0x26>
 8001498:	bd38      	pop	{r3, r4, r5, pc}
 800149a:	0781      	lsls	r1, r0, #30
 800149c:	bf58      	it	pl
 800149e:	6963      	ldrpl	r3, [r4, #20]
 80014a0:	60a3      	str	r3, [r4, #8]
 80014a2:	e7f4      	b.n	800148e <__swsetup_r+0x92>
 80014a4:	2000      	movs	r0, #0
 80014a6:	e7f7      	b.n	8001498 <__swsetup_r+0x9c>
 80014a8:	20000604 	.word	0x20000604

080014ac <_raise_r>:
 80014ac:	291f      	cmp	r1, #31
 80014ae:	b538      	push	{r3, r4, r5, lr}
 80014b0:	4604      	mov	r4, r0
 80014b2:	460d      	mov	r5, r1
 80014b4:	d904      	bls.n	80014c0 <_raise_r+0x14>
 80014b6:	2316      	movs	r3, #22
 80014b8:	6003      	str	r3, [r0, #0]
 80014ba:	f04f 30ff 	mov.w	r0, #4294967295
 80014be:	bd38      	pop	{r3, r4, r5, pc}
 80014c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80014c2:	b112      	cbz	r2, 80014ca <_raise_r+0x1e>
 80014c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80014c8:	b94b      	cbnz	r3, 80014de <_raise_r+0x32>
 80014ca:	4620      	mov	r0, r4
 80014cc:	f000 f830 	bl	8001530 <_getpid_r>
 80014d0:	462a      	mov	r2, r5
 80014d2:	4601      	mov	r1, r0
 80014d4:	4620      	mov	r0, r4
 80014d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014da:	f000 b817 	b.w	800150c <_kill_r>
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d00a      	beq.n	80014f8 <_raise_r+0x4c>
 80014e2:	1c59      	adds	r1, r3, #1
 80014e4:	d103      	bne.n	80014ee <_raise_r+0x42>
 80014e6:	2316      	movs	r3, #22
 80014e8:	6003      	str	r3, [r0, #0]
 80014ea:	2001      	movs	r0, #1
 80014ec:	e7e7      	b.n	80014be <_raise_r+0x12>
 80014ee:	2400      	movs	r4, #0
 80014f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80014f4:	4628      	mov	r0, r5
 80014f6:	4798      	blx	r3
 80014f8:	2000      	movs	r0, #0
 80014fa:	e7e0      	b.n	80014be <_raise_r+0x12>

080014fc <raise>:
 80014fc:	4b02      	ldr	r3, [pc, #8]	; (8001508 <raise+0xc>)
 80014fe:	4601      	mov	r1, r0
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	f7ff bfd3 	b.w	80014ac <_raise_r>
 8001506:	bf00      	nop
 8001508:	20000604 	.word	0x20000604

0800150c <_kill_r>:
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4d07      	ldr	r5, [pc, #28]	; (800152c <_kill_r+0x20>)
 8001510:	2300      	movs	r3, #0
 8001512:	4604      	mov	r4, r0
 8001514:	4608      	mov	r0, r1
 8001516:	4611      	mov	r1, r2
 8001518:	602b      	str	r3, [r5, #0]
 800151a:	f7fe ffcd 	bl	80004b8 <_kill>
 800151e:	1c43      	adds	r3, r0, #1
 8001520:	d102      	bne.n	8001528 <_kill_r+0x1c>
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	b103      	cbz	r3, 8001528 <_kill_r+0x1c>
 8001526:	6023      	str	r3, [r4, #0]
 8001528:	bd38      	pop	{r3, r4, r5, pc}
 800152a:	bf00      	nop
 800152c:	20000764 	.word	0x20000764

08001530 <_getpid_r>:
 8001530:	f7fe bfbb 	b.w	80004aa <_getpid>

08001534 <__swhatbuf_r>:
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	460c      	mov	r4, r1
 8001538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800153c:	2900      	cmp	r1, #0
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	4615      	mov	r5, r2
 8001542:	461e      	mov	r6, r3
 8001544:	da0d      	bge.n	8001562 <__swhatbuf_r+0x2e>
 8001546:	89a3      	ldrh	r3, [r4, #12]
 8001548:	f013 0f80 	tst.w	r3, #128	; 0x80
 800154c:	f04f 0100 	mov.w	r1, #0
 8001550:	bf0c      	ite	eq
 8001552:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001556:	2340      	movne	r3, #64	; 0x40
 8001558:	2000      	movs	r0, #0
 800155a:	6031      	str	r1, [r6, #0]
 800155c:	602b      	str	r3, [r5, #0]
 800155e:	b016      	add	sp, #88	; 0x58
 8001560:	bd70      	pop	{r4, r5, r6, pc}
 8001562:	466a      	mov	r2, sp
 8001564:	f000 f848 	bl	80015f8 <_fstat_r>
 8001568:	2800      	cmp	r0, #0
 800156a:	dbec      	blt.n	8001546 <__swhatbuf_r+0x12>
 800156c:	9901      	ldr	r1, [sp, #4]
 800156e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001572:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001576:	4259      	negs	r1, r3
 8001578:	4159      	adcs	r1, r3
 800157a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157e:	e7eb      	b.n	8001558 <__swhatbuf_r+0x24>

08001580 <__smakebuf_r>:
 8001580:	898b      	ldrh	r3, [r1, #12]
 8001582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001584:	079d      	lsls	r5, r3, #30
 8001586:	4606      	mov	r6, r0
 8001588:	460c      	mov	r4, r1
 800158a:	d507      	bpl.n	800159c <__smakebuf_r+0x1c>
 800158c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001590:	6023      	str	r3, [r4, #0]
 8001592:	6123      	str	r3, [r4, #16]
 8001594:	2301      	movs	r3, #1
 8001596:	6163      	str	r3, [r4, #20]
 8001598:	b002      	add	sp, #8
 800159a:	bd70      	pop	{r4, r5, r6, pc}
 800159c:	ab01      	add	r3, sp, #4
 800159e:	466a      	mov	r2, sp
 80015a0:	f7ff ffc8 	bl	8001534 <__swhatbuf_r>
 80015a4:	9900      	ldr	r1, [sp, #0]
 80015a6:	4605      	mov	r5, r0
 80015a8:	4630      	mov	r0, r6
 80015aa:	f7ff fab9 	bl	8000b20 <_malloc_r>
 80015ae:	b948      	cbnz	r0, 80015c4 <__smakebuf_r+0x44>
 80015b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015b4:	059a      	lsls	r2, r3, #22
 80015b6:	d4ef      	bmi.n	8001598 <__smakebuf_r+0x18>
 80015b8:	f023 0303 	bic.w	r3, r3, #3
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	81a3      	strh	r3, [r4, #12]
 80015c2:	e7e3      	b.n	800158c <__smakebuf_r+0xc>
 80015c4:	89a3      	ldrh	r3, [r4, #12]
 80015c6:	6020      	str	r0, [r4, #0]
 80015c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015cc:	81a3      	strh	r3, [r4, #12]
 80015ce:	9b00      	ldr	r3, [sp, #0]
 80015d0:	6163      	str	r3, [r4, #20]
 80015d2:	9b01      	ldr	r3, [sp, #4]
 80015d4:	6120      	str	r0, [r4, #16]
 80015d6:	b15b      	cbz	r3, 80015f0 <__smakebuf_r+0x70>
 80015d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015dc:	4630      	mov	r0, r6
 80015de:	f000 f81d 	bl	800161c <_isatty_r>
 80015e2:	b128      	cbz	r0, 80015f0 <__smakebuf_r+0x70>
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	81a3      	strh	r3, [r4, #12]
 80015f0:	89a3      	ldrh	r3, [r4, #12]
 80015f2:	431d      	orrs	r5, r3
 80015f4:	81a5      	strh	r5, [r4, #12]
 80015f6:	e7cf      	b.n	8001598 <__smakebuf_r+0x18>

080015f8 <_fstat_r>:
 80015f8:	b538      	push	{r3, r4, r5, lr}
 80015fa:	4d07      	ldr	r5, [pc, #28]	; (8001618 <_fstat_r+0x20>)
 80015fc:	2300      	movs	r3, #0
 80015fe:	4604      	mov	r4, r0
 8001600:	4608      	mov	r0, r1
 8001602:	4611      	mov	r1, r2
 8001604:	602b      	str	r3, [r5, #0]
 8001606:	f7fe ffb5 	bl	8000574 <_fstat>
 800160a:	1c43      	adds	r3, r0, #1
 800160c:	d102      	bne.n	8001614 <_fstat_r+0x1c>
 800160e:	682b      	ldr	r3, [r5, #0]
 8001610:	b103      	cbz	r3, 8001614 <_fstat_r+0x1c>
 8001612:	6023      	str	r3, [r4, #0]
 8001614:	bd38      	pop	{r3, r4, r5, pc}
 8001616:	bf00      	nop
 8001618:	20000764 	.word	0x20000764

0800161c <_isatty_r>:
 800161c:	b538      	push	{r3, r4, r5, lr}
 800161e:	4d06      	ldr	r5, [pc, #24]	; (8001638 <_isatty_r+0x1c>)
 8001620:	2300      	movs	r3, #0
 8001622:	4604      	mov	r4, r0
 8001624:	4608      	mov	r0, r1
 8001626:	602b      	str	r3, [r5, #0]
 8001628:	f7fe ffb3 	bl	8000592 <_isatty>
 800162c:	1c43      	adds	r3, r0, #1
 800162e:	d102      	bne.n	8001636 <_isatty_r+0x1a>
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	b103      	cbz	r3, 8001636 <_isatty_r+0x1a>
 8001634:	6023      	str	r3, [r4, #0]
 8001636:	bd38      	pop	{r3, r4, r5, pc}
 8001638:	20000764 	.word	0x20000764

0800163c <_init>:
 800163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163e:	bf00      	nop
 8001640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001642:	bc08      	pop	{r3}
 8001644:	469e      	mov	lr, r3
 8001646:	4770      	bx	lr

08001648 <_fini>:
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164a:	bf00      	nop
 800164c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800164e:	bc08      	pop	{r3}
 8001650:	469e      	mov	lr, r3
 8001652:	4770      	bx	lr
